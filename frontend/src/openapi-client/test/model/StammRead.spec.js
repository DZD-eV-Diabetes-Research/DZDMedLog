/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MedLogRestApi);
  }
}(this, function(expect, MedLogRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MedLogRestApi.StammRead();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StammRead', function() {
    it('should create an instance of StammRead', function() {
      // uncomment below and update the code to test StammRead
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be.a(MedLogRestApi.StammRead);
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property aiVersionId (base name: "ai_version_id")', function() {
      // uncomment below and update the code to test the property aiVersionId
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property laufnr (base name: "laufnr")', function() {
      // uncomment below and update the code to test the property laufnr
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property stakenn (base name: "stakenn")', function() {
      // uncomment below and update the code to test the property stakenn
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property staname (base name: "staname")', function() {
      // uncomment below and update the code to test the property staname
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property atcCode (base name: "atc_code")', function() {
      // uncomment below and update the code to test the property atcCode
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property indgr (base name: "indgr")', function() {
      // uncomment below and update the code to test the property indgr
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property pzn (base name: "pzn")', function() {
      // uncomment below and update the code to test the property pzn
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property herstellerCode (base name: "hersteller_code")', function() {
      // uncomment below and update the code to test the property herstellerCode
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property darrform (base name: "darrform")', function() {
      // uncomment below and update the code to test the property darrform
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property zuzahlstufe (base name: "zuzahlstufe")', function() {
      // uncomment below and update the code to test the property zuzahlstufe
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property packgroesse (base name: "packgroesse")', function() {
      // uncomment below and update the code to test the property packgroesse
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property dddpk (base name: "dddpk")', function() {
      // uncomment below and update the code to test the property dddpk
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property apopflicht (base name: "apopflicht")', function() {
      // uncomment below and update the code to test the property apopflicht
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property preisartAlt (base name: "preisart_alt")', function() {
      // uncomment below and update the code to test the property preisartAlt
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property preisartNeu (base name: "preisart_neu")', function() {
      // uncomment below and update the code to test the property preisartNeu
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property preisAlt (base name: "preis_alt")', function() {
      // uncomment below and update the code to test the property preisAlt
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property preisNeu (base name: "preis_neu")', function() {
      // uncomment below and update the code to test the property preisNeu
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property festbetrag (base name: "festbetrag")', function() {
      // uncomment below and update the code to test the property festbetrag
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property marktzugang (base name: "marktzugang")', function() {
      // uncomment below and update the code to test the property marktzugang
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property ahdatum (base name: "ahdatum")', function() {
      // uncomment below and update the code to test the property ahdatum
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property rueckruf (base name: "rueckruf")', function() {
      // uncomment below and update the code to test the property rueckruf
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property generikakenn (base name: "generikakenn")', function() {
      // uncomment below and update the code to test the property generikakenn
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property appform (base name: "appform")', function() {
      // uncomment below and update the code to test the property appform
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property biosimilar (base name: "biosimilar")', function() {
      // uncomment below and update the code to test the property biosimilar
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property orphan (base name: "orphan")', function() {
      // uncomment below and update the code to test the property orphan
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property aiVersionRef (base name: "ai_version_ref")', function() {
      // uncomment below and update the code to test the property aiVersionRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property darrformRef (base name: "darrform_ref")', function() {
      // uncomment below and update the code to test the property darrformRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property appformRef (base name: "appform_ref")', function() {
      // uncomment below and update the code to test the property appformRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property zuzahlstufeRef (base name: "zuzahlstufe_ref")', function() {
      // uncomment below and update the code to test the property zuzahlstufeRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property herstellerRef (base name: "hersteller_ref")', function() {
      // uncomment below and update the code to test the property herstellerRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property apopflichtRef (base name: "apopflicht_ref")', function() {
      // uncomment below and update the code to test the property apopflichtRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property preisartNeuRef (base name: "preisart_neu_ref")', function() {
      // uncomment below and update the code to test the property preisartNeuRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property preisartAltRef (base name: "preisart_alt_ref")', function() {
      // uncomment below and update the code to test the property preisartAltRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property biosimilarRef (base name: "biosimilar_ref")', function() {
      // uncomment below and update the code to test the property biosimilarRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

    it('should have the property generikakennRef (base name: "generikakenn_ref")', function() {
      // uncomment below and update the code to test the property generikakennRef
      //var instance = new MedLogRestApi.StammRead();
      //expect(instance).to.be();
    });

  });

}));
