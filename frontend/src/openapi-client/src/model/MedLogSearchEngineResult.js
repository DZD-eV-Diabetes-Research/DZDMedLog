/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StammRead from './StammRead';

/**
 * The MedLogSearchEngineResult model module.
 * @module model/MedLogSearchEngineResult
 * @version 0.0.1
 */
class MedLogSearchEngineResult {
    /**
     * Constructs a new <code>MedLogSearchEngineResult</code>.
     * @alias module:model/MedLogSearchEngineResult
     * @param pzn {String} 
     * @param relevanceScore {Number} 
     * @param item {module:model/StammRead} 
     */
    constructor(pzn, relevanceScore, item) { 
        
        MedLogSearchEngineResult.initialize(this, pzn, relevanceScore, item);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pzn, relevanceScore, item) { 
        obj['pzn'] = pzn;
        obj['relevance_score'] = relevanceScore;
        obj['item'] = item;
    }

    /**
     * Constructs a <code>MedLogSearchEngineResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MedLogSearchEngineResult} obj Optional instance to populate.
     * @return {module:model/MedLogSearchEngineResult} The populated <code>MedLogSearchEngineResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MedLogSearchEngineResult();

            if (data.hasOwnProperty('pzn')) {
                obj['pzn'] = ApiClient.convertToType(data['pzn'], 'String');
            }
            if (data.hasOwnProperty('relevance_score')) {
                obj['relevance_score'] = ApiClient.convertToType(data['relevance_score'], 'Number');
            }
            if (data.hasOwnProperty('item')) {
                obj['item'] = StammRead.constructFromObject(data['item']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MedLogSearchEngineResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MedLogSearchEngineResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MedLogSearchEngineResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['pzn'] && !(typeof data['pzn'] === 'string' || data['pzn'] instanceof String)) {
            throw new Error("Expected the field `pzn` to be a primitive type in the JSON string but got " + data['pzn']);
        }
        // validate the optional field `item`
        if (data['item']) { // data not null
          StammRead.validateJSON(data['item']);
        }

        return true;
    }


}

MedLogSearchEngineResult.RequiredProperties = ["pzn", "relevance_score", "item"];

/**
 * @member {String} pzn
 */
MedLogSearchEngineResult.prototype['pzn'] = undefined;

/**
 * @member {Number} relevance_score
 */
MedLogSearchEngineResult.prototype['relevance_score'] = undefined;

/**
 * @member {module:model/StammRead} item
 */
MedLogSearchEngineResult.prototype['item'] = undefined;






export default MedLogSearchEngineResult;

