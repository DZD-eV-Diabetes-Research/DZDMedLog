/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Ahdatum from './Ahdatum';
import AiDataVersion from './AiDataVersion';
import ApoPflicht from './ApoPflicht';
import Appform from './Appform';
import AtcCode from './AtcCode';
import Biosimilar1 from './Biosimilar1';
import Darreichungsform from './Darreichungsform';
import Generikakennung from './Generikakennung';
import Hersteller from './Hersteller';
import Marktzugang from './Marktzugang';
import PreisartAlt from './PreisartAlt';
import PreisartNeu from './PreisartNeu';
import Stakenn from './Stakenn';
import StammReadAppformRef from './StammReadAppformRef';
import StammReadBiosimilarRef from './StammReadBiosimilarRef';
import StammReadPreisartNeuRef from './StammReadPreisartNeuRef';
import StammReadZuzahlstufeRef from './StammReadZuzahlstufeRef';
import Zuzahlstufe from './Zuzahlstufe';

/**
 * The StammRead model module.
 * @module model/StammRead
 * @version 0.0.1
 */
class StammRead {
    /**
     * Constructs a new <code>StammRead</code>.
     * @alias module:model/StammRead
     * @param aiVersionId {String} Foreing key to 'AiDataVersion' ('GKV WiDo Arzneimittel Index' Data Format Version) which contains the information which Arzneimittel Index 'Datenstand' and 'Dateiversion' the row has
     * @param laufnr {String} Laufende Nummer (vom WIdO vergeben)
     * @param stakenn {module:model/Stakenn} 
     * @param staname {String} Standardaggregatname (vom WIdO vergeben) (enhält *NV* wenn 'Noch nicht abschließend klassifiziertes Arzneimittel')
     * @param atcCode {module:model/AtcCode} 
     * @param indgr {String} Indikationsgruppe (nach Roter Liste 2014)
     * @param pzn {String} Pharmazentralnummer
     * @param name {String} Präparatename
     * @param herstellerCode {String} Herstellerschlüssel (Siehe `hersteller_ref` für vollen Herstellernamen)
     * @param darrform {String} Darreichungsformschlüssel (Siehe `darrform_ref` für vollen Namen)
     * @param zuzahlstufe {module:model/Zuzahlstufe} 
     * @param packgroesse {Number} Packungsgröße (in 1/10 Einheiten)
     * @param dddpk {String} DDD je Packung (nach WIdO, in 1/1000 Einheiten)
     * @param apopflicht {Number} Apotheken-/Rezeptpflichtschlüssel (Siehe `apopflicht_ref` für vollen Namen)
     * @param preisartAlt {module:model/PreisartAlt} 
     * @param preisartNeu {module:model/PreisartNeu} 
     * @param preisAlt {Number} Preis alt (in Cent)
     * @param preisNeu {Number} Preis neu (in Cent)
     * @param festbetrag {Number} Festbetrag (in Cent)
     * @param marktzugang {module:model/Marktzugang} 
     * @param ahdatum {module:model/Ahdatum} 
     * @param rueckruf {Boolean} Rückruf/zurückgezogen oder zurückgezogen durch Hersteller
     * @param generikakenn {Number} Generika-Kennung
     * @param appform {module:model/Appform} 
     * @param biosimilar {module:model/Biosimilar1} 
     * @param orphan {Boolean} Von der EMA mit Orphan Drug Status zugelassene Arzneimittel (Klassifikation zum Stichtag)
     * @param aiVersionRef {module:model/AiDataVersion} 
     * @param darrformRef {module:model/Darreichungsform} 
     * @param appformRef {module:model/StammReadAppformRef} 
     * @param zuzahlstufeRef {module:model/StammReadZuzahlstufeRef} 
     * @param herstellerRef {module:model/Hersteller} 
     * @param apopflichtRef {module:model/ApoPflicht} 
     * @param preisartNeuRef {module:model/StammReadPreisartNeuRef} 
     * @param preisartAltRef {module:model/StammReadPreisartNeuRef} 
     * @param biosimilarRef {module:model/StammReadBiosimilarRef} 
     * @param generikakennRef {module:model/Generikakennung} 
     */
    constructor(aiVersionId, laufnr, stakenn, staname, atcCode, indgr, pzn, name, herstellerCode, darrform, zuzahlstufe, packgroesse, dddpk, apopflicht, preisartAlt, preisartNeu, preisAlt, preisNeu, festbetrag, marktzugang, ahdatum, rueckruf, generikakenn, appform, biosimilar, orphan, aiVersionRef, darrformRef, appformRef, zuzahlstufeRef, herstellerRef, apopflichtRef, preisartNeuRef, preisartAltRef, biosimilarRef, generikakennRef) { 
        
        StammRead.initialize(this, aiVersionId, laufnr, stakenn, staname, atcCode, indgr, pzn, name, herstellerCode, darrform, zuzahlstufe, packgroesse, dddpk, apopflicht, preisartAlt, preisartNeu, preisAlt, preisNeu, festbetrag, marktzugang, ahdatum, rueckruf, generikakenn, appform, biosimilar, orphan, aiVersionRef, darrformRef, appformRef, zuzahlstufeRef, herstellerRef, apopflichtRef, preisartNeuRef, preisartAltRef, biosimilarRef, generikakennRef);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aiVersionId, laufnr, stakenn, staname, atcCode, indgr, pzn, name, herstellerCode, darrform, zuzahlstufe, packgroesse, dddpk, apopflicht, preisartAlt, preisartNeu, preisAlt, preisNeu, festbetrag, marktzugang, ahdatum, rueckruf, generikakenn, appform, biosimilar, orphan, aiVersionRef, darrformRef, appformRef, zuzahlstufeRef, herstellerRef, apopflichtRef, preisartNeuRef, preisartAltRef, biosimilarRef, generikakennRef) { 
        obj['ai_version_id'] = aiVersionId;
        obj['laufnr'] = laufnr;
        obj['stakenn'] = stakenn;
        obj['staname'] = staname;
        obj['atc_code'] = atcCode;
        obj['indgr'] = indgr;
        obj['pzn'] = pzn;
        obj['name'] = name;
        obj['hersteller_code'] = herstellerCode;
        obj['darrform'] = darrform;
        obj['zuzahlstufe'] = zuzahlstufe;
        obj['packgroesse'] = packgroesse;
        obj['dddpk'] = dddpk;
        obj['apopflicht'] = apopflicht;
        obj['preisart_alt'] = preisartAlt;
        obj['preisart_neu'] = preisartNeu;
        obj['preis_alt'] = preisAlt;
        obj['preis_neu'] = preisNeu;
        obj['festbetrag'] = festbetrag;
        obj['marktzugang'] = marktzugang;
        obj['ahdatum'] = ahdatum;
        obj['rueckruf'] = rueckruf;
        obj['generikakenn'] = generikakenn;
        obj['appform'] = appform;
        obj['biosimilar'] = biosimilar;
        obj['orphan'] = orphan;
        obj['ai_version_ref'] = aiVersionRef;
        obj['darrform_ref'] = darrformRef;
        obj['appform_ref'] = appformRef;
        obj['zuzahlstufe_ref'] = zuzahlstufeRef;
        obj['hersteller_ref'] = herstellerRef;
        obj['apopflicht_ref'] = apopflichtRef;
        obj['preisart_neu_ref'] = preisartNeuRef;
        obj['preisart_alt_ref'] = preisartAltRef;
        obj['biosimilar_ref'] = biosimilarRef;
        obj['generikakenn_ref'] = generikakennRef;
    }

    /**
     * Constructs a <code>StammRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StammRead} obj Optional instance to populate.
     * @return {module:model/StammRead} The populated <code>StammRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StammRead();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('ai_version_id')) {
                obj['ai_version_id'] = ApiClient.convertToType(data['ai_version_id'], 'String');
            }
            if (data.hasOwnProperty('laufnr')) {
                obj['laufnr'] = ApiClient.convertToType(data['laufnr'], 'String');
            }
            if (data.hasOwnProperty('stakenn')) {
                obj['stakenn'] = Stakenn.constructFromObject(data['stakenn']);
            }
            if (data.hasOwnProperty('staname')) {
                obj['staname'] = ApiClient.convertToType(data['staname'], 'String');
            }
            if (data.hasOwnProperty('atc_code')) {
                obj['atc_code'] = AtcCode.constructFromObject(data['atc_code']);
            }
            if (data.hasOwnProperty('indgr')) {
                obj['indgr'] = ApiClient.convertToType(data['indgr'], 'String');
            }
            if (data.hasOwnProperty('pzn')) {
                obj['pzn'] = ApiClient.convertToType(data['pzn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('hersteller_code')) {
                obj['hersteller_code'] = ApiClient.convertToType(data['hersteller_code'], 'String');
            }
            if (data.hasOwnProperty('darrform')) {
                obj['darrform'] = ApiClient.convertToType(data['darrform'], 'String');
            }
            if (data.hasOwnProperty('zuzahlstufe')) {
                obj['zuzahlstufe'] = Zuzahlstufe.constructFromObject(data['zuzahlstufe']);
            }
            if (data.hasOwnProperty('packgroesse')) {
                obj['packgroesse'] = ApiClient.convertToType(data['packgroesse'], 'Number');
            }
            if (data.hasOwnProperty('dddpk')) {
                obj['dddpk'] = ApiClient.convertToType(data['dddpk'], 'String');
            }
            if (data.hasOwnProperty('apopflicht')) {
                obj['apopflicht'] = ApiClient.convertToType(data['apopflicht'], 'Number');
            }
            if (data.hasOwnProperty('preisart_alt')) {
                obj['preisart_alt'] = PreisartAlt.constructFromObject(data['preisart_alt']);
            }
            if (data.hasOwnProperty('preisart_neu')) {
                obj['preisart_neu'] = PreisartNeu.constructFromObject(data['preisart_neu']);
            }
            if (data.hasOwnProperty('preis_alt')) {
                obj['preis_alt'] = ApiClient.convertToType(data['preis_alt'], 'Number');
            }
            if (data.hasOwnProperty('preis_neu')) {
                obj['preis_neu'] = ApiClient.convertToType(data['preis_neu'], 'Number');
            }
            if (data.hasOwnProperty('festbetrag')) {
                obj['festbetrag'] = ApiClient.convertToType(data['festbetrag'], 'Number');
            }
            if (data.hasOwnProperty('marktzugang')) {
                obj['marktzugang'] = Marktzugang.constructFromObject(data['marktzugang']);
            }
            if (data.hasOwnProperty('ahdatum')) {
                obj['ahdatum'] = Ahdatum.constructFromObject(data['ahdatum']);
            }
            if (data.hasOwnProperty('rueckruf')) {
                obj['rueckruf'] = ApiClient.convertToType(data['rueckruf'], 'Boolean');
            }
            if (data.hasOwnProperty('generikakenn')) {
                obj['generikakenn'] = ApiClient.convertToType(data['generikakenn'], 'Number');
            }
            if (data.hasOwnProperty('appform')) {
                obj['appform'] = Appform.constructFromObject(data['appform']);
            }
            if (data.hasOwnProperty('biosimilar')) {
                obj['biosimilar'] = Biosimilar1.constructFromObject(data['biosimilar']);
            }
            if (data.hasOwnProperty('orphan')) {
                obj['orphan'] = ApiClient.convertToType(data['orphan'], 'Boolean');
            }
            if (data.hasOwnProperty('ai_version_ref')) {
                obj['ai_version_ref'] = AiDataVersion.constructFromObject(data['ai_version_ref']);
            }
            if (data.hasOwnProperty('darrform_ref')) {
                obj['darrform_ref'] = Darreichungsform.constructFromObject(data['darrform_ref']);
            }
            if (data.hasOwnProperty('appform_ref')) {
                obj['appform_ref'] = StammReadAppformRef.constructFromObject(data['appform_ref']);
            }
            if (data.hasOwnProperty('zuzahlstufe_ref')) {
                obj['zuzahlstufe_ref'] = StammReadZuzahlstufeRef.constructFromObject(data['zuzahlstufe_ref']);
            }
            if (data.hasOwnProperty('hersteller_ref')) {
                obj['hersteller_ref'] = Hersteller.constructFromObject(data['hersteller_ref']);
            }
            if (data.hasOwnProperty('apopflicht_ref')) {
                obj['apopflicht_ref'] = ApoPflicht.constructFromObject(data['apopflicht_ref']);
            }
            if (data.hasOwnProperty('preisart_neu_ref')) {
                obj['preisart_neu_ref'] = StammReadPreisartNeuRef.constructFromObject(data['preisart_neu_ref']);
            }
            if (data.hasOwnProperty('preisart_alt_ref')) {
                obj['preisart_alt_ref'] = StammReadPreisartNeuRef.constructFromObject(data['preisart_alt_ref']);
            }
            if (data.hasOwnProperty('biosimilar_ref')) {
                obj['biosimilar_ref'] = StammReadBiosimilarRef.constructFromObject(data['biosimilar_ref']);
            }
            if (data.hasOwnProperty('generikakenn_ref')) {
                obj['generikakenn_ref'] = Generikakennung.constructFromObject(data['generikakenn_ref']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StammRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StammRead</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StammRead.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ai_version_id'] && !(typeof data['ai_version_id'] === 'string' || data['ai_version_id'] instanceof String)) {
            throw new Error("Expected the field `ai_version_id` to be a primitive type in the JSON string but got " + data['ai_version_id']);
        }
        // ensure the json data is a string
        if (data['laufnr'] && !(typeof data['laufnr'] === 'string' || data['laufnr'] instanceof String)) {
            throw new Error("Expected the field `laufnr` to be a primitive type in the JSON string but got " + data['laufnr']);
        }
        // validate the optional field `stakenn`
        if (data['stakenn']) { // data not null
          Stakenn.validateJSON(data['stakenn']);
        }
        // ensure the json data is a string
        if (data['staname'] && !(typeof data['staname'] === 'string' || data['staname'] instanceof String)) {
            throw new Error("Expected the field `staname` to be a primitive type in the JSON string but got " + data['staname']);
        }
        // validate the optional field `atc_code`
        if (data['atc_code']) { // data not null
          AtcCode.validateJSON(data['atc_code']);
        }
        // ensure the json data is a string
        if (data['indgr'] && !(typeof data['indgr'] === 'string' || data['indgr'] instanceof String)) {
            throw new Error("Expected the field `indgr` to be a primitive type in the JSON string but got " + data['indgr']);
        }
        // ensure the json data is a string
        if (data['pzn'] && !(typeof data['pzn'] === 'string' || data['pzn'] instanceof String)) {
            throw new Error("Expected the field `pzn` to be a primitive type in the JSON string but got " + data['pzn']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['hersteller_code'] && !(typeof data['hersteller_code'] === 'string' || data['hersteller_code'] instanceof String)) {
            throw new Error("Expected the field `hersteller_code` to be a primitive type in the JSON string but got " + data['hersteller_code']);
        }
        // ensure the json data is a string
        if (data['darrform'] && !(typeof data['darrform'] === 'string' || data['darrform'] instanceof String)) {
            throw new Error("Expected the field `darrform` to be a primitive type in the JSON string but got " + data['darrform']);
        }
        // validate the optional field `zuzahlstufe`
        if (data['zuzahlstufe']) { // data not null
          Zuzahlstufe.validateJSON(data['zuzahlstufe']);
        }
        // ensure the json data is a string
        if (data['dddpk'] && !(typeof data['dddpk'] === 'string' || data['dddpk'] instanceof String)) {
            throw new Error("Expected the field `dddpk` to be a primitive type in the JSON string but got " + data['dddpk']);
        }
        // validate the optional field `preisart_alt`
        if (data['preisart_alt']) { // data not null
          PreisartAlt.validateJSON(data['preisart_alt']);
        }
        // validate the optional field `preisart_neu`
        if (data['preisart_neu']) { // data not null
          PreisartNeu.validateJSON(data['preisart_neu']);
        }
        // validate the optional field `marktzugang`
        if (data['marktzugang']) { // data not null
          Marktzugang.validateJSON(data['marktzugang']);
        }
        // validate the optional field `ahdatum`
        if (data['ahdatum']) { // data not null
          Ahdatum.validateJSON(data['ahdatum']);
        }
        // validate the optional field `appform`
        if (data['appform']) { // data not null
          Appform.validateJSON(data['appform']);
        }
        // validate the optional field `biosimilar`
        if (data['biosimilar']) { // data not null
          Biosimilar1.validateJSON(data['biosimilar']);
        }
        // validate the optional field `ai_version_ref`
        if (data['ai_version_ref']) { // data not null
          AiDataVersion.validateJSON(data['ai_version_ref']);
        }
        // validate the optional field `darrform_ref`
        if (data['darrform_ref']) { // data not null
          Darreichungsform.validateJSON(data['darrform_ref']);
        }
        // validate the optional field `appform_ref`
        if (data['appform_ref']) { // data not null
          StammReadAppformRef.validateJSON(data['appform_ref']);
        }
        // validate the optional field `zuzahlstufe_ref`
        if (data['zuzahlstufe_ref']) { // data not null
          StammReadZuzahlstufeRef.validateJSON(data['zuzahlstufe_ref']);
        }
        // validate the optional field `hersteller_ref`
        if (data['hersteller_ref']) { // data not null
          Hersteller.validateJSON(data['hersteller_ref']);
        }
        // validate the optional field `apopflicht_ref`
        if (data['apopflicht_ref']) { // data not null
          ApoPflicht.validateJSON(data['apopflicht_ref']);
        }
        // validate the optional field `preisart_neu_ref`
        if (data['preisart_neu_ref']) { // data not null
          StammReadPreisartNeuRef.validateJSON(data['preisart_neu_ref']);
        }
        // validate the optional field `preisart_alt_ref`
        if (data['preisart_alt_ref']) { // data not null
          StammReadPreisartNeuRef.validateJSON(data['preisart_alt_ref']);
        }
        // validate the optional field `biosimilar_ref`
        if (data['biosimilar_ref']) { // data not null
          StammReadBiosimilarRef.validateJSON(data['biosimilar_ref']);
        }
        // validate the optional field `generikakenn_ref`
        if (data['generikakenn_ref']) { // data not null
          Generikakennung.validateJSON(data['generikakenn_ref']);
        }

        return true;
    }


}

StammRead.RequiredProperties = ["ai_version_id", "laufnr", "stakenn", "staname", "atc_code", "indgr", "pzn", "name", "hersteller_code", "darrform", "zuzahlstufe", "packgroesse", "dddpk", "apopflicht", "preisart_alt", "preisart_neu", "preis_alt", "preis_neu", "festbetrag", "marktzugang", "ahdatum", "rueckruf", "generikakenn", "appform", "biosimilar", "orphan", "ai_version_ref", "darrform_ref", "appform_ref", "zuzahlstufe_ref", "hersteller_ref", "apopflicht_ref", "preisart_neu_ref", "preisart_alt_ref", "biosimilar_ref", "generikakenn_ref"];

/**
 * @member {Date} created_at
 */
StammRead.prototype['created_at'] = undefined;

/**
 * Foreing key to 'AiDataVersion' ('GKV WiDo Arzneimittel Index' Data Format Version) which contains the information which Arzneimittel Index 'Datenstand' and 'Dateiversion' the row has
 * @member {String} ai_version_id
 */
StammRead.prototype['ai_version_id'] = undefined;

/**
 * Laufende Nummer (vom WIdO vergeben)
 * @member {String} laufnr
 */
StammRead.prototype['laufnr'] = undefined;

/**
 * @member {module:model/Stakenn} stakenn
 */
StammRead.prototype['stakenn'] = undefined;

/**
 * Standardaggregatname (vom WIdO vergeben) (enhält *NV* wenn 'Noch nicht abschließend klassifiziertes Arzneimittel')
 * @member {String} staname
 */
StammRead.prototype['staname'] = undefined;

/**
 * @member {module:model/AtcCode} atc_code
 */
StammRead.prototype['atc_code'] = undefined;

/**
 * Indikationsgruppe (nach Roter Liste 2014)
 * @member {String} indgr
 */
StammRead.prototype['indgr'] = undefined;

/**
 * Pharmazentralnummer
 * @member {String} pzn
 */
StammRead.prototype['pzn'] = undefined;

/**
 * Präparatename
 * @member {String} name
 */
StammRead.prototype['name'] = undefined;

/**
 * Herstellerschlüssel (Siehe `hersteller_ref` für vollen Herstellernamen)
 * @member {String} hersteller_code
 */
StammRead.prototype['hersteller_code'] = undefined;

/**
 * Darreichungsformschlüssel (Siehe `darrform_ref` für vollen Namen)
 * @member {String} darrform
 */
StammRead.prototype['darrform'] = undefined;

/**
 * @member {module:model/Zuzahlstufe} zuzahlstufe
 */
StammRead.prototype['zuzahlstufe'] = undefined;

/**
 * Packungsgröße (in 1/10 Einheiten)
 * @member {Number} packgroesse
 */
StammRead.prototype['packgroesse'] = undefined;

/**
 * DDD je Packung (nach WIdO, in 1/1000 Einheiten)
 * @member {String} dddpk
 */
StammRead.prototype['dddpk'] = undefined;

/**
 * Apotheken-/Rezeptpflichtschlüssel (Siehe `apopflicht_ref` für vollen Namen)
 * @member {Number} apopflicht
 */
StammRead.prototype['apopflicht'] = undefined;

/**
 * @member {module:model/PreisartAlt} preisart_alt
 */
StammRead.prototype['preisart_alt'] = undefined;

/**
 * @member {module:model/PreisartNeu} preisart_neu
 */
StammRead.prototype['preisart_neu'] = undefined;

/**
 * Preis alt (in Cent)
 * @member {Number} preis_alt
 */
StammRead.prototype['preis_alt'] = undefined;

/**
 * Preis neu (in Cent)
 * @member {Number} preis_neu
 */
StammRead.prototype['preis_neu'] = undefined;

/**
 * Festbetrag (in Cent)
 * @member {Number} festbetrag
 */
StammRead.prototype['festbetrag'] = undefined;

/**
 * @member {module:model/Marktzugang} marktzugang
 */
StammRead.prototype['marktzugang'] = undefined;

/**
 * @member {module:model/Ahdatum} ahdatum
 */
StammRead.prototype['ahdatum'] = undefined;

/**
 * Rückruf/zurückgezogen oder zurückgezogen durch Hersteller
 * @member {Boolean} rueckruf
 */
StammRead.prototype['rueckruf'] = undefined;

/**
 * Generika-Kennung
 * @member {Number} generikakenn
 */
StammRead.prototype['generikakenn'] = undefined;

/**
 * @member {module:model/Appform} appform
 */
StammRead.prototype['appform'] = undefined;

/**
 * @member {module:model/Biosimilar1} biosimilar
 */
StammRead.prototype['biosimilar'] = undefined;

/**
 * Von der EMA mit Orphan Drug Status zugelassene Arzneimittel (Klassifikation zum Stichtag)
 * @member {Boolean} orphan
 */
StammRead.prototype['orphan'] = undefined;

/**
 * @member {module:model/AiDataVersion} ai_version_ref
 */
StammRead.prototype['ai_version_ref'] = undefined;

/**
 * @member {module:model/Darreichungsform} darrform_ref
 */
StammRead.prototype['darrform_ref'] = undefined;

/**
 * @member {module:model/StammReadAppformRef} appform_ref
 */
StammRead.prototype['appform_ref'] = undefined;

/**
 * @member {module:model/StammReadZuzahlstufeRef} zuzahlstufe_ref
 */
StammRead.prototype['zuzahlstufe_ref'] = undefined;

/**
 * @member {module:model/Hersteller} hersteller_ref
 */
StammRead.prototype['hersteller_ref'] = undefined;

/**
 * @member {module:model/ApoPflicht} apopflicht_ref
 */
StammRead.prototype['apopflicht_ref'] = undefined;

/**
 * @member {module:model/StammReadPreisartNeuRef} preisart_neu_ref
 */
StammRead.prototype['preisart_neu_ref'] = undefined;

/**
 * @member {module:model/StammReadPreisartNeuRef} preisart_alt_ref
 */
StammRead.prototype['preisart_alt_ref'] = undefined;

/**
 * @member {module:model/StammReadBiosimilarRef} biosimilar_ref
 */
StammRead.prototype['biosimilar_ref'] = undefined;

/**
 * @member {module:model/Generikakennung} generikakenn_ref
 */
StammRead.prototype['generikakenn_ref'] = undefined;






export default StammRead;

