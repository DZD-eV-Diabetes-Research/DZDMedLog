/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JWTBundleTokenResponse model module.
 * @module model/JWTBundleTokenResponse
 * @version 0.0.1
 */
class JWTBundleTokenResponse {
    /**
     * Constructs a new <code>JWTBundleTokenResponse</code>.
     * @alias module:model/JWTBundleTokenResponse
     * @param expiresIn {Number} The number of seconds until the token expires
     * @param expiresAt {Number} The time as POSIX timestamp in UTC when the token expires
     * @param refreshToken {String} Refresh token to be used to get new access tokens
     * @param accessToken {String} Token to be used to authenticate against the API
     * @param refreshTokenExpiresIn {Number} The number of seconds until the token expires
     * @param refreshTokenExpiresAt {Number} 
     */
    constructor(expiresIn, expiresAt, refreshToken, accessToken, refreshTokenExpiresIn, refreshTokenExpiresAt) { 
        
        JWTBundleTokenResponse.initialize(this, expiresIn, expiresAt, refreshToken, accessToken, refreshTokenExpiresIn, refreshTokenExpiresAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expiresIn, expiresAt, refreshToken, accessToken, refreshTokenExpiresIn, refreshTokenExpiresAt) { 
        obj['expires_in'] = expiresIn;
        obj['expires_at'] = expiresAt;
        obj['refresh_token'] = refreshToken;
        obj['access_token'] = accessToken;
        obj['refresh_token_expires_in'] = refreshTokenExpiresIn;
        obj['refresh_token_expires_at'] = refreshTokenExpiresAt;
    }

    /**
     * Constructs a <code>JWTBundleTokenResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JWTBundleTokenResponse} obj Optional instance to populate.
     * @return {module:model/JWTBundleTokenResponse} The populated <code>JWTBundleTokenResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JWTBundleTokenResponse();

            if (data.hasOwnProperty('token_type')) {
                obj['token_type'] = ApiClient.convertToType(data['token_type'], Object);
            }
            if (data.hasOwnProperty('expires_in')) {
                obj['expires_in'] = ApiClient.convertToType(data['expires_in'], 'Number');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'Number');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
            if (data.hasOwnProperty('access_token')) {
                obj['access_token'] = ApiClient.convertToType(data['access_token'], 'String');
            }
            if (data.hasOwnProperty('refresh_token_expires_in')) {
                obj['refresh_token_expires_in'] = ApiClient.convertToType(data['refresh_token_expires_in'], 'Number');
            }
            if (data.hasOwnProperty('refresh_token_expires_at')) {
                obj['refresh_token_expires_at'] = ApiClient.convertToType(data['refresh_token_expires_at'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JWTBundleTokenResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JWTBundleTokenResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JWTBundleTokenResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['refresh_token'] && !(typeof data['refresh_token'] === 'string' || data['refresh_token'] instanceof String)) {
            throw new Error("Expected the field `refresh_token` to be a primitive type in the JSON string but got " + data['refresh_token']);
        }
        // ensure the json data is a string
        if (data['access_token'] && !(typeof data['access_token'] === 'string' || data['access_token'] instanceof String)) {
            throw new Error("Expected the field `access_token` to be a primitive type in the JSON string but got " + data['access_token']);
        }

        return true;
    }


}

JWTBundleTokenResponse.RequiredProperties = ["expires_in", "expires_at", "refresh_token", "access_token", "refresh_token_expires_in", "refresh_token_expires_at"];

/**
 * @member {Object} token_type
 */
JWTBundleTokenResponse.prototype['token_type'] = undefined;

/**
 * The number of seconds until the token expires
 * @member {Number} expires_in
 */
JWTBundleTokenResponse.prototype['expires_in'] = undefined;

/**
 * The time as POSIX timestamp in UTC when the token expires
 * @member {Number} expires_at
 */
JWTBundleTokenResponse.prototype['expires_at'] = undefined;

/**
 * Refresh token to be used to get new access tokens
 * @member {String} refresh_token
 */
JWTBundleTokenResponse.prototype['refresh_token'] = undefined;

/**
 * Token to be used to authenticate against the API
 * @member {String} access_token
 */
JWTBundleTokenResponse.prototype['access_token'] = undefined;

/**
 * The number of seconds until the token expires
 * @member {Number} refresh_token_expires_in
 */
JWTBundleTokenResponse.prototype['refresh_token_expires_in'] = undefined;

/**
 * @member {Number} refresh_token_expires_at
 */
JWTBundleTokenResponse.prototype['refresh_token_expires_at'] = undefined;






export default JWTBundleTokenResponse;

