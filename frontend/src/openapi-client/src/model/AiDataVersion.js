/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportCompletedAt from './ImportCompletedAt';

/**
 * The AiDataVersion model module.
 * @module model/AiDataVersion
 * @version 0.0.1
 */
class AiDataVersion {
    /**
     * Constructs a new <code>AiDataVersion</code>.
     * This is a metadata table and not part of the official Wido GTK Arzneimittelindex. We track the \&quot;datenstand\&quot; and \&quot;dateiversion\&quot; variants of the source data here.   Args:     DrugModelTableBase (_type_): _description_     table (bool, optional): _description_. Defaults to True.
     * @alias module:model/AiDataVersion
     * @param dateiversion {String} Dateiversion
     * @param datenstand {String} Monat Datenstand (JJJJMM)
     */
    constructor(dateiversion, datenstand) { 
        
        AiDataVersion.initialize(this, dateiversion, datenstand);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateiversion, datenstand) { 
        obj['dateiversion'] = dateiversion;
        obj['datenstand'] = datenstand;
    }

    /**
     * Constructs a <code>AiDataVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AiDataVersion} obj Optional instance to populate.
     * @return {module:model/AiDataVersion} The populated <code>AiDataVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AiDataVersion();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('dateiversion')) {
                obj['dateiversion'] = ApiClient.convertToType(data['dateiversion'], 'String');
            }
            if (data.hasOwnProperty('datenstand')) {
                obj['datenstand'] = ApiClient.convertToType(data['datenstand'], 'String');
            }
            if (data.hasOwnProperty('import_completed_at')) {
                obj['import_completed_at'] = ImportCompletedAt.constructFromObject(data['import_completed_at']);
            }
            if (data.hasOwnProperty('deactivated')) {
                obj['deactivated'] = ApiClient.convertToType(data['deactivated'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AiDataVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AiDataVersion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AiDataVersion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['dateiversion'] && !(typeof data['dateiversion'] === 'string' || data['dateiversion'] instanceof String)) {
            throw new Error("Expected the field `dateiversion` to be a primitive type in the JSON string but got " + data['dateiversion']);
        }
        // ensure the json data is a string
        if (data['datenstand'] && !(typeof data['datenstand'] === 'string' || data['datenstand'] instanceof String)) {
            throw new Error("Expected the field `datenstand` to be a primitive type in the JSON string but got " + data['datenstand']);
        }
        // validate the optional field `import_completed_at`
        if (data['import_completed_at']) { // data not null
          ImportCompletedAt.validateJSON(data['import_completed_at']);
        }

        return true;
    }


}

AiDataVersion.RequiredProperties = ["dateiversion", "datenstand"];

/**
 * @member {Date} created_at
 */
AiDataVersion.prototype['created_at'] = undefined;

/**
 * @member {String} id
 */
AiDataVersion.prototype['id'] = undefined;

/**
 * Dateiversion
 * @member {String} dateiversion
 */
AiDataVersion.prototype['dateiversion'] = undefined;

/**
 * Monat Datenstand (JJJJMM)
 * @member {String} datenstand
 */
AiDataVersion.prototype['datenstand'] = undefined;

/**
 * @member {module:model/ImportCompletedAt} import_completed_at
 */
AiDataVersion.prototype['import_completed_at'] = undefined;

/**
 * If set to true this arzneimittel index version will be ignored (when not queried for explciet in the crud interface). This can be helpfull e.g. if the last import contained dirty data and one wants to fallback on the previous version.
 * @member {Boolean} deactivated
 * @default false
 */
AiDataVersion.prototype['deactivated'] = false;






export default AiDataVersion;

