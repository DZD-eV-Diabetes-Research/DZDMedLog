/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InterviewUpdate model module.
 * @module model/InterviewUpdate
 * @version 0.0.1
 */
class InterviewUpdate {
    /**
     * Constructs a new <code>InterviewUpdate</code>.
     * @alias module:model/InterviewUpdate
     * @param eventId {String} 
     * @param probandExternalId {String} A unique ID given to the proband from the studies external probant management system
     * @param probandHasTakenMeds {Boolean} 
     * @param interviewNumber {Number} TB: This field is still kind of mysterious to me. In the user interview video the user just filled it with some number. Maybe a process we can automize (shameless plug: https://git.apps.dzd-ev.org/dzdpythonmodules/ptan)?
     */
    constructor(eventId, probandExternalId, probandHasTakenMeds, interviewNumber) { 
        
        InterviewUpdate.initialize(this, eventId, probandExternalId, probandHasTakenMeds, interviewNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventId, probandExternalId, probandHasTakenMeds, interviewNumber) { 
        obj['event_id'] = eventId;
        obj['proband_external_id'] = probandExternalId;
        obj['proband_has_taken_meds'] = probandHasTakenMeds;
        obj['interview_number'] = interviewNumber;
    }

    /**
     * Constructs a <code>InterviewUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InterviewUpdate} obj Optional instance to populate.
     * @return {module:model/InterviewUpdate} The populated <code>InterviewUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InterviewUpdate();

            if (data.hasOwnProperty('event_id')) {
                obj['event_id'] = ApiClient.convertToType(data['event_id'], 'String');
            }
            if (data.hasOwnProperty('proband_external_id')) {
                obj['proband_external_id'] = ApiClient.convertToType(data['proband_external_id'], 'String');
            }
            if (data.hasOwnProperty('interview_start_time_utc')) {
                obj['interview_start_time_utc'] = ApiClient.convertToType(data['interview_start_time_utc'], 'Date');
            }
            if (data.hasOwnProperty('interview_end_time_utc')) {
                obj['interview_end_time_utc'] = ApiClient.convertToType(data['interview_end_time_utc'], 'Date');
            }
            if (data.hasOwnProperty('proband_has_taken_meds')) {
                obj['proband_has_taken_meds'] = ApiClient.convertToType(data['proband_has_taken_meds'], 'Boolean');
            }
            if (data.hasOwnProperty('interview_number')) {
                obj['interview_number'] = ApiClient.convertToType(data['interview_number'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InterviewUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InterviewUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InterviewUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['event_id'] && !(typeof data['event_id'] === 'string' || data['event_id'] instanceof String)) {
            throw new Error("Expected the field `event_id` to be a primitive type in the JSON string but got " + data['event_id']);
        }
        // ensure the json data is a string
        if (data['proband_external_id'] && !(typeof data['proband_external_id'] === 'string' || data['proband_external_id'] instanceof String)) {
            throw new Error("Expected the field `proband_external_id` to be a primitive type in the JSON string but got " + data['proband_external_id']);
        }

        return true;
    }


}

InterviewUpdate.RequiredProperties = ["event_id", "proband_external_id", "proband_has_taken_meds", "interview_number"];

/**
 * @member {String} event_id
 */
InterviewUpdate.prototype['event_id'] = undefined;

/**
 * A unique ID given to the proband from the studies external probant management system
 * @member {String} proband_external_id
 */
InterviewUpdate.prototype['proband_external_id'] = undefined;

/**
 * @member {Date} interview_start_time_utc
 */
InterviewUpdate.prototype['interview_start_time_utc'] = undefined;

/**
 * @member {Date} interview_end_time_utc
 */
InterviewUpdate.prototype['interview_end_time_utc'] = undefined;

/**
 * @member {Boolean} proband_has_taken_meds
 */
InterviewUpdate.prototype['proband_has_taken_meds'] = undefined;

/**
 * TB: This field is still kind of mysterious to me. In the user interview video the user just filled it with some number. Maybe a process we can automize (shameless plug: https://git.apps.dzd-ev.org/dzdpythonmodules/ptan)?
 * @member {Number} interview_number
 */
InterviewUpdate.prototype['interview_number'] = undefined;






export default InterviewUpdate;

