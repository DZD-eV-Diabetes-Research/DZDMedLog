/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsNeededDoseUnit from './AsNeededDoseUnit';
import ConsumedMedsTodayAnswers from './ConsumedMedsTodayAnswers';
import DosePerDay from './DosePerDay';
import Id from './Id';
import IntakeAdministeredByDoctor from './IntakeAdministeredByDoctor';
import IntakeEndTimeUtc from './IntakeEndTimeUtc';
import IntakeIntakeRegularOrAsNeeded from './IntakeIntakeRegularOrAsNeeded';
import IntakeRegularIntervallOfDailyDose from './IntakeRegularIntervallOfDailyDose';
import InterviewId from './InterviewId';

/**
 * The IntakeUpdate model module.
 * @module model/IntakeUpdate
 * @version 0.0.1
 */
class IntakeUpdate {
    /**
     * Constructs a new <code>IntakeUpdate</code>.
     * @alias module:model/IntakeUpdate
     * @param id {module:model/Id} 
     * @param interviewId {module:model/InterviewId} 
     * @param pharmazentralnummer {String} Take the Pharmazentralnummer in many formats, but all formats will be normalized to just a 8 digit number.
     * @param intakeStartTimeUtc {Date} 
     * @param asNeededDoseUnit {module:model/AsNeededDoseUnit} 
     * @param consumedMedsToday {module:model/ConsumedMedsTodayAnswers} 
     */
    constructor(id, interviewId, pharmazentralnummer, intakeStartTimeUtc, asNeededDoseUnit, consumedMedsToday) { 
        
        IntakeUpdate.initialize(this, id, interviewId, pharmazentralnummer, intakeStartTimeUtc, asNeededDoseUnit, consumedMedsToday);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, interviewId, pharmazentralnummer, intakeStartTimeUtc, asNeededDoseUnit, consumedMedsToday) { 
        obj['id'] = id;
        obj['interview_id'] = interviewId;
        obj['pharmazentralnummer'] = pharmazentralnummer;
        obj['intake_start_time_utc'] = intakeStartTimeUtc;
        obj['as_needed_dose_unit'] = asNeededDoseUnit;
        obj['consumed_meds_today'] = consumedMedsToday;
    }

    /**
     * Constructs a <code>IntakeUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntakeUpdate} obj Optional instance to populate.
     * @return {module:model/IntakeUpdate} The populated <code>IntakeUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntakeUpdate();

            if (data.hasOwnProperty('id')) {
                obj['id'] = Id.constructFromObject(data['id']);
            }
            if (data.hasOwnProperty('interview_id')) {
                obj['interview_id'] = InterviewId.constructFromObject(data['interview_id']);
            }
            if (data.hasOwnProperty('pharmazentralnummer')) {
                obj['pharmazentralnummer'] = ApiClient.convertToType(data['pharmazentralnummer'], 'String');
            }
            if (data.hasOwnProperty('intake_start_time_utc')) {
                obj['intake_start_time_utc'] = ApiClient.convertToType(data['intake_start_time_utc'], 'Date');
            }
            if (data.hasOwnProperty('intake_end_time_utc')) {
                obj['intake_end_time_utc'] = IntakeEndTimeUtc.constructFromObject(data['intake_end_time_utc']);
            }
            if (data.hasOwnProperty('administered_by_doctor')) {
                obj['administered_by_doctor'] = IntakeAdministeredByDoctor.constructFromObject(data['administered_by_doctor']);
            }
            if (data.hasOwnProperty('intake_regular_or_as_needed')) {
                obj['intake_regular_or_as_needed'] = IntakeIntakeRegularOrAsNeeded.constructFromObject(data['intake_regular_or_as_needed']);
            }
            if (data.hasOwnProperty('dose_per_day')) {
                obj['dose_per_day'] = DosePerDay.constructFromObject(data['dose_per_day']);
            }
            if (data.hasOwnProperty('regular_intervall_of_daily_dose')) {
                obj['regular_intervall_of_daily_dose'] = IntakeRegularIntervallOfDailyDose.constructFromObject(data['regular_intervall_of_daily_dose']);
            }
            if (data.hasOwnProperty('as_needed_dose_unit')) {
                obj['as_needed_dose_unit'] = AsNeededDoseUnit.constructFromObject(data['as_needed_dose_unit']);
            }
            if (data.hasOwnProperty('consumed_meds_today')) {
                obj['consumed_meds_today'] = ConsumedMedsTodayAnswers.constructFromObject(data['consumed_meds_today']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntakeUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntakeUpdate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IntakeUpdate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          Id.validateJSON(data['id']);
        }
        // validate the optional field `interview_id`
        if (data['interview_id']) { // data not null
          InterviewId.validateJSON(data['interview_id']);
        }
        // ensure the json data is a string
        if (data['pharmazentralnummer'] && !(typeof data['pharmazentralnummer'] === 'string' || data['pharmazentralnummer'] instanceof String)) {
            throw new Error("Expected the field `pharmazentralnummer` to be a primitive type in the JSON string but got " + data['pharmazentralnummer']);
        }
        // validate the optional field `intake_end_time_utc`
        if (data['intake_end_time_utc']) { // data not null
          IntakeEndTimeUtc.validateJSON(data['intake_end_time_utc']);
        }
        // validate the optional field `administered_by_doctor`
        if (data['administered_by_doctor']) { // data not null
          IntakeAdministeredByDoctor.validateJSON(data['administered_by_doctor']);
        }
        // validate the optional field `intake_regular_or_as_needed`
        if (data['intake_regular_or_as_needed']) { // data not null
          IntakeIntakeRegularOrAsNeeded.validateJSON(data['intake_regular_or_as_needed']);
        }
        // validate the optional field `dose_per_day`
        if (data['dose_per_day']) { // data not null
          DosePerDay.validateJSON(data['dose_per_day']);
        }
        // validate the optional field `regular_intervall_of_daily_dose`
        if (data['regular_intervall_of_daily_dose']) { // data not null
          IntakeRegularIntervallOfDailyDose.validateJSON(data['regular_intervall_of_daily_dose']);
        }
        // validate the optional field `as_needed_dose_unit`
        if (data['as_needed_dose_unit']) { // data not null
          AsNeededDoseUnit.validateJSON(data['as_needed_dose_unit']);
        }

        return true;
    }


}

IntakeUpdate.RequiredProperties = ["id", "interview_id", "pharmazentralnummer", "intake_start_time_utc", "as_needed_dose_unit", "consumed_meds_today"];

/**
 * @member {module:model/Id} id
 */
IntakeUpdate.prototype['id'] = undefined;

/**
 * @member {module:model/InterviewId} interview_id
 */
IntakeUpdate.prototype['interview_id'] = undefined;

/**
 * Take the Pharmazentralnummer in many formats, but all formats will be normalized to just a 8 digit number.
 * @member {String} pharmazentralnummer
 */
IntakeUpdate.prototype['pharmazentralnummer'] = undefined;

/**
 * @member {Date} intake_start_time_utc
 */
IntakeUpdate.prototype['intake_start_time_utc'] = undefined;

/**
 * @member {module:model/IntakeEndTimeUtc} intake_end_time_utc
 */
IntakeUpdate.prototype['intake_end_time_utc'] = undefined;

/**
 * @member {module:model/IntakeAdministeredByDoctor} administered_by_doctor
 */
IntakeUpdate.prototype['administered_by_doctor'] = undefined;

/**
 * @member {module:model/IntakeIntakeRegularOrAsNeeded} intake_regular_or_as_needed
 */
IntakeUpdate.prototype['intake_regular_or_as_needed'] = undefined;

/**
 * @member {module:model/DosePerDay} dose_per_day
 */
IntakeUpdate.prototype['dose_per_day'] = undefined;

/**
 * @member {module:model/IntakeRegularIntervallOfDailyDose} regular_intervall_of_daily_dose
 */
IntakeUpdate.prototype['regular_intervall_of_daily_dose'] = undefined;

/**
 * @member {module:model/AsNeededDoseUnit} as_needed_dose_unit
 */
IntakeUpdate.prototype['as_needed_dose_unit'] = undefined;

/**
 * @member {module:model/ConsumedMedsTodayAnswers} consumed_meds_today
 */
IntakeUpdate.prototype['consumed_meds_today'] = undefined;






export default IntakeUpdate;

