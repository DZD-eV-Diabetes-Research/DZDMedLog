/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Normpackungsgroessen model module.
 * @module model/Normpackungsgroessen
 * @version 0.0.1
 */
class Normpackungsgroessen {
    /**
     * Constructs a new <code>Normpackungsgroessen</code>.
     * @alias module:model/Normpackungsgroessen
     * @param aiVersionId {String} Foreing key to 'AiDataVersion' ('GKV WiDo Arzneimittel Index' Data Format Version) which contains the information which Arzneimittel Index 'Datenstand' and 'Dateiversion' the row has
     * @param zuzahlstufe {String} Normpackungsgröße. Tim: I dont know where the term 'zuzahlstufe' is coming from. It does not make too much sense for me and its confusing compared to the table name `Normpackungsgroessen`. Maybe historic artefact/bug in the Arzneimittelindex or i am just stupid.
     * @param bedeutung {String} Bedeutung
     */
    constructor(aiVersionId, zuzahlstufe, bedeutung) { 
        
        Normpackungsgroessen.initialize(this, aiVersionId, zuzahlstufe, bedeutung);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aiVersionId, zuzahlstufe, bedeutung) { 
        obj['ai_version_id'] = aiVersionId;
        obj['zuzahlstufe'] = zuzahlstufe;
        obj['bedeutung'] = bedeutung;
    }

    /**
     * Constructs a <code>Normpackungsgroessen</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Normpackungsgroessen} obj Optional instance to populate.
     * @return {module:model/Normpackungsgroessen} The populated <code>Normpackungsgroessen</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Normpackungsgroessen();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('ai_version_id')) {
                obj['ai_version_id'] = ApiClient.convertToType(data['ai_version_id'], 'String');
            }
            if (data.hasOwnProperty('zuzahlstufe')) {
                obj['zuzahlstufe'] = ApiClient.convertToType(data['zuzahlstufe'], 'String');
            }
            if (data.hasOwnProperty('bedeutung')) {
                obj['bedeutung'] = ApiClient.convertToType(data['bedeutung'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Normpackungsgroessen</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Normpackungsgroessen</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Normpackungsgroessen.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ai_version_id'] && !(typeof data['ai_version_id'] === 'string' || data['ai_version_id'] instanceof String)) {
            throw new Error("Expected the field `ai_version_id` to be a primitive type in the JSON string but got " + data['ai_version_id']);
        }
        // ensure the json data is a string
        if (data['zuzahlstufe'] && !(typeof data['zuzahlstufe'] === 'string' || data['zuzahlstufe'] instanceof String)) {
            throw new Error("Expected the field `zuzahlstufe` to be a primitive type in the JSON string but got " + data['zuzahlstufe']);
        }
        // ensure the json data is a string
        if (data['bedeutung'] && !(typeof data['bedeutung'] === 'string' || data['bedeutung'] instanceof String)) {
            throw new Error("Expected the field `bedeutung` to be a primitive type in the JSON string but got " + data['bedeutung']);
        }

        return true;
    }


}

Normpackungsgroessen.RequiredProperties = ["ai_version_id", "zuzahlstufe", "bedeutung"];

/**
 * @member {Date} created_at
 */
Normpackungsgroessen.prototype['created_at'] = undefined;

/**
 * Foreing key to 'AiDataVersion' ('GKV WiDo Arzneimittel Index' Data Format Version) which contains the information which Arzneimittel Index 'Datenstand' and 'Dateiversion' the row has
 * @member {String} ai_version_id
 */
Normpackungsgroessen.prototype['ai_version_id'] = undefined;

/**
 * Normpackungsgröße. Tim: I dont know where the term 'zuzahlstufe' is coming from. It does not make too much sense for me and its confusing compared to the table name `Normpackungsgroessen`. Maybe historic artefact/bug in the Arzneimittelindex or i am just stupid.
 * @member {String} zuzahlstufe
 */
Normpackungsgroessen.prototype['zuzahlstufe'] = undefined;

/**
 * Bedeutung
 * @member {String} bedeutung
 */
Normpackungsgroessen.prototype['bedeutung'] = undefined;






export default Normpackungsgroessen;

