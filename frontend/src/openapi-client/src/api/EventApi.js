/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Event from '../model/Event';
import EventUpdate from '../model/EventUpdate';
import HTTPValidationError from '../model/HTTPValidationError';
import PaginatedResponseEvent from '../model/PaginatedResponseEvent';
import StudyId from '../model/StudyId';

/**
* Event service.
* @module api/EventApi
* @version 0.0.1
*/
export default class EventApi {

    /**
    * Constructs a new EventApi. 
    * @alias module:api/EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEventStudyStudyIdEventPost operation.
     * @callback module:api/EventApi~createEventStudyStudyIdEventPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Event
     * Create a new event.
     * @param {module:model/StudyId} studyId 
     * @param {module:model/Event} event 
     * @param {module:api/EventApi~createEventStudyStudyIdEventPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    createEventStudyStudyIdEventPost(studyId, event, callback) {
      let postBody = event;
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling createEventStudyStudyIdEventPost");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling createEventStudyStudyIdEventPost");
      }

      let pathParams = {
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/study/{study_id}/event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventStudyStudyIdEventEventIdDelete operation.
     * @callback module:api/EventApi~deleteEventStudyStudyIdEventEventIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Event
     * Delete existing event - Not Yet Implented
     * @param {String} eventId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/EventApi~deleteEventStudyStudyIdEventEventIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEventStudyStudyIdEventEventIdDelete(eventId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling deleteEventStudyStudyIdEventEventIdDelete");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling deleteEventStudyStudyIdEventEventIdDelete");
      }

      let pathParams = {
        'event_id': eventId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/study/{study_id}/event/{event_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventsStudyStudyIdEventGet operation.
     * @callback module:api/EventApi~listEventsStudyStudyIdEventGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseEvent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Events
     * List all studies the user has access too.
     * @param {module:model/StudyId} studyId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hideCompleted = false)] 
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {String} [orderBy] 
     * @param {Boolean} [orderDesc = false)] 
     * @param {module:api/EventApi~listEventsStudyStudyIdEventGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseEvent}
     */
    listEventsStudyStudyIdEventGet(studyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling listEventsStudyStudyIdEventGet");
      }

      let pathParams = {
        'study_id': studyId
      };
      let queryParams = {
        'hide_completed': opts['hideCompleted'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_desc': opts['orderDesc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResponseEvent;
      return this.apiClient.callApi(
        '/study/{study_id}/event', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEventStudyStudyIdEventEventIdPatch operation.
     * @callback module:api/EventApi~updateEventStudyStudyIdEventEventIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Event
     * Update existing event
     * @param {String} eventId 
     * @param {module:model/StudyId} studyId 
     * @param {module:model/EventUpdate} eventUpdate 
     * @param {module:api/EventApi~updateEventStudyStudyIdEventEventIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    updateEventStudyStudyIdEventEventIdPatch(eventId, studyId, eventUpdate, callback) {
      let postBody = eventUpdate;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling updateEventStudyStudyIdEventEventIdPatch");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling updateEventStudyStudyIdEventEventIdPatch");
      }
      // verify the required parameter 'eventUpdate' is set
      if (eventUpdate === undefined || eventUpdate === null) {
        throw new Error("Missing the required parameter 'eventUpdate' when calling updateEventStudyStudyIdEventEventIdPatch");
      }

      let pathParams = {
        'event_id': eventId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/study/{study_id}/event/{event_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
