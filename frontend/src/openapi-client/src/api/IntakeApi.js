/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Intake from '../model/Intake';
import IntakeCreate from '../model/IntakeCreate';
import IntakeUpdate from '../model/IntakeUpdate';
import StudyId from '../model/StudyId';

/**
* Intake service.
* @module api/IntakeApi
* @version 0.0.1
*/
export default class IntakeApi {

    /**
    * Constructs a new IntakeApi. 
    * @alias module:api/IntakeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIntakeStudyStudyIdInterviewInterviewIdIntakePost operation.
     * @callback module:api/IntakeApi~createIntakeStudyStudyIdInterviewInterviewIdIntakePostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Intake>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Intake
     * Create intake record in certain interview. user must have at least 'interviewer'-permissions on study.
     * @param {String} interviewId 
     * @param {module:model/StudyId} studyId 
     * @param {module:model/IntakeCreate} intakeCreate 
     * @param {module:api/IntakeApi~createIntakeStudyStudyIdInterviewInterviewIdIntakePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Intake>}
     */
    createIntakeStudyStudyIdInterviewInterviewIdIntakePost(interviewId, studyId, intakeCreate, callback) {
      let postBody = intakeCreate;
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling createIntakeStudyStudyIdInterviewInterviewIdIntakePost");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling createIntakeStudyStudyIdInterviewInterviewIdIntakePost");
      }
      // verify the required parameter 'intakeCreate' is set
      if (intakeCreate === undefined || intakeCreate === null) {
        throw new Error("Missing the required parameter 'intakeCreate' when calling createIntakeStudyStudyIdInterviewInterviewIdIntakePost");
      }

      let pathParams = {
        'interview_id': interviewId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Intake];
      return this.apiClient.callApi(
        '/study/{study_id}/interview/{interview_id}/intake', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdDelete operation.
     * @callback module:api/IntakeApi~deleteIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Intake>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Intake
     * Update intake record. user must have at least 'interviewer'-permissions on study.
     * @param {String} interviewId 
     * @param {String} intakeId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/IntakeApi~deleteIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Intake>}
     */
    deleteIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdDelete(interviewId, intakeId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling deleteIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdDelete");
      }
      // verify the required parameter 'intakeId' is set
      if (intakeId === undefined || intakeId === null) {
        throw new Error("Missing the required parameter 'intakeId' when calling deleteIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdDelete");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling deleteIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdDelete");
      }

      let pathParams = {
        'interview_id': interviewId,
        'intake_id': intakeId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Intake];
      return this.apiClient.callApi(
        '/study/{study_id}/interview/{interview_id}/intake/{intake_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdGet operation.
     * @callback module:api/IntakeApi~getIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Intake} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Intake
     * Get a certain intake record by it id
     * @param {String} interviewId 
     * @param {String} intakeId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/IntakeApi~getIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Intake}
     */
    getIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdGet(interviewId, intakeId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling getIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdGet");
      }
      // verify the required parameter 'intakeId' is set
      if (intakeId === undefined || intakeId === null) {
        throw new Error("Missing the required parameter 'intakeId' when calling getIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling getIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdGet");
      }

      let pathParams = {
        'interview_id': interviewId,
        'intake_id': intakeId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Intake;
      return this.apiClient.callApi(
        '/study/{study_id}/interview/{interview_id}/intake/{intake_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllIntakesOfInterviewStudyStudyIdInterviewInterviewIdIntakeGet operation.
     * @callback module:api/IntakeApi~listAllIntakesOfInterviewStudyStudyIdInterviewInterviewIdIntakeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Intake>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Intakes Of Interview
     * List all medicine intakes of interview.
     * @param {String} interviewId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/IntakeApi~listAllIntakesOfInterviewStudyStudyIdInterviewInterviewIdIntakeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Intake>}
     */
    listAllIntakesOfInterviewStudyStudyIdInterviewInterviewIdIntakeGet(interviewId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling listAllIntakesOfInterviewStudyStudyIdInterviewInterviewIdIntakeGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling listAllIntakesOfInterviewStudyStudyIdInterviewInterviewIdIntakeGet");
      }

      let pathParams = {
        'interview_id': interviewId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Intake];
      return this.apiClient.callApi(
        '/study/{study_id}/interview/{interview_id}/intake', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllIntakesOfLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastIntakeGet operation.
     * @callback module:api/IntakeApi~listAllIntakesOfLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastIntakeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Intake>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Intakes Of Last Completed Interview
     * List all medicine intakes of one probands last completed interview.
     * @param {String} probandId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/IntakeApi~listAllIntakesOfLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastIntakeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Intake>}
     */
    listAllIntakesOfLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastIntakeGet(probandId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'probandId' is set
      if (probandId === undefined || probandId === null) {
        throw new Error("Missing the required parameter 'probandId' when calling listAllIntakesOfLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastIntakeGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling listAllIntakesOfLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastIntakeGet");
      }

      let pathParams = {
        'proband_id': probandId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Intake];
      return this.apiClient.callApi(
        '/study/{study_id}/proband/{proband_id}/interview/last/intake', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllIntakesOfLastUncompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentIntakeGet operation.
     * @callback module:api/IntakeApi~listAllIntakesOfLastUncompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentIntakeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Intake>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Intakes Of Last Uncompleted Interview
     * List all medicine intakes of one probands last completed interview.
     * @param {String} probandId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/IntakeApi~listAllIntakesOfLastUncompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentIntakeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Intake>}
     */
    listAllIntakesOfLastUncompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentIntakeGet(probandId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'probandId' is set
      if (probandId === undefined || probandId === null) {
        throw new Error("Missing the required parameter 'probandId' when calling listAllIntakesOfLastUncompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentIntakeGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling listAllIntakesOfLastUncompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentIntakeGet");
      }

      let pathParams = {
        'proband_id': probandId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Intake];
      return this.apiClient.callApi(
        '/study/{study_id}/proband/{proband_id}/interview/current/intake', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatch operation.
     * @callback module:api/IntakeApi~updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Intake>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Intake
     * Update intake record. user must have at least 'interviewer'-permissions on study.
     * @param {String} interviewId 
     * @param {String} intakeId 
     * @param {module:model/StudyId} studyId 
     * @param {module:model/IntakeUpdate} intakeUpdate 
     * @param {module:api/IntakeApi~updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Intake>}
     */
    updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatch(interviewId, intakeId, studyId, intakeUpdate, callback) {
      let postBody = intakeUpdate;
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatch");
      }
      // verify the required parameter 'intakeId' is set
      if (intakeId === undefined || intakeId === null) {
        throw new Error("Missing the required parameter 'intakeId' when calling updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatch");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatch");
      }
      // verify the required parameter 'intakeUpdate' is set
      if (intakeUpdate === undefined || intakeUpdate === null) {
        throw new Error("Missing the required parameter 'intakeUpdate' when calling updateIntakeStudyStudyIdInterviewInterviewIdIntakeIntakeIdPatch");
      }

      let pathParams = {
        'interview_id': interviewId,
        'intake_id': intakeId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Intake];
      return this.apiClient.callApi(
        '/study/{study_id}/interview/{interview_id}/intake/{intake_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
