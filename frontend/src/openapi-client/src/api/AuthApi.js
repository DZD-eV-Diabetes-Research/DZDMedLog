/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ClientId from '../model/ClientId';
import ClientSecret from '../model/ClientSecret';
import GrantType from '../model/GrantType';
import HTTPValidationError from '../model/HTTPValidationError';
import JWTAccessTokenResponse from '../model/JWTAccessTokenResponse';
import JWTBundleTokenResponse from '../model/JWTBundleTokenResponse';

/**
* Auth service.
* @module api/AuthApi
* @version 0.0.1
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFreshAccessTokenAuthRefreshPost operation.
     * @callback module:api/AuthApi~getFreshAccessTokenAuthRefreshPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWTAccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Fresh Access Token
     * Endpoint to get a new/fresh access token. A valid refresh token must be provided. Accepts the refresh token either as a form field **OR** in the 'refresh-token' header field.<br>Returns a new access token on success.
     * @param {Object} opts Optional parameters
     * @param {String} [refreshToken] Refresh token via `refresh-token` header field
     * @param {String} [refreshTokenForm] 
     * @param {module:api/AuthApi~getFreshAccessTokenAuthRefreshPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWTAccessTokenResponse}
     */
    getFreshAccessTokenAuthRefreshPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'refresh-token': opts['refreshToken']
      };
      let formParams = {
        'refresh_token_form': opts['refreshTokenForm']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = JWTAccessTokenResponse;
      return this.apiClient.callApi(
        '/auth/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginForRefreshAndAccessTokenAuthTokenPost operation.
     * @callback module:api/AuthApi~loginForRefreshAndAccessTokenAuthTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWTBundleTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login For Refresh And Access Token
     * @param {String} username 
     * @param {String} password 
     * @param {Object} opts Optional parameters
     * @param {module:model/GrantType} [grantType] 
     * @param {String} [scope = '')] 
     * @param {module:model/ClientId} [clientId] 
     * @param {module:model/ClientSecret} [clientSecret] 
     * @param {module:api/AuthApi~loginForRefreshAndAccessTokenAuthTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWTBundleTokenResponse}
     */
    loginForRefreshAndAccessTokenAuthTokenPost(username, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling loginForRefreshAndAccessTokenAuthTokenPost");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling loginForRefreshAndAccessTokenAuthTokenPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'grant_type': opts['grantType'],
        'username': username,
        'password': password,
        'scope': opts['scope'],
        'client_id': opts['clientId'],
        'client_secret': opts['clientSecret']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = JWTBundleTokenResponse;
      return this.apiClient.callApi(
        '/auth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
