/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import PaginatedResponseUser from '../model/PaginatedResponseUser';
import User from '../model/User';
import UserCreate from '../model/UserCreate';
import UserUpdateByAdmin from '../model/UserUpdateByAdmin';
import UserUpdateByUser from '../model/UserUpdateByUser';

/**
* User service.
* @module api/UserApi
* @version 0.0.1
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLocalUserUserPost operation.
     * @callback module:api/UserApi~createLocalUserUserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Local User
     * Creates a new user in the local user database. Needs admin or user-manager role.
     * @param {module:model/UserCreate} userCreate 
     * @param {Object} opts Optional parameters
     * @param {String} [userPassword] The password for the created user. If non is defined the user will be created but not able to login until an admin user defines a password.
     * @param {module:api/UserApi~createLocalUserUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    createLocalUserUserPost(userCreate, opts, callback) {
      opts = opts || {};
      let postBody = userCreate;
      // verify the required parameter 'userCreate' is set
      if (userCreate === undefined || userCreate === null) {
        throw new Error("Missing the required parameter 'userCreate' when calling createLocalUserUserPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'user_password': opts['userPassword']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyselfUserMeGet operation.
     * @callback module:api/UserApi~getMyselfUserMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Myself
     * Get account data from the current user
     * @param {module:api/UserApi~getMyselfUserMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getMyselfUserMeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUserUserIdGet operation.
     * @callback module:api/UserApi~getUserUserUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Get account data from a user by its id. Needs admin or user-manager role.
     * @param {String} userId 
     * @param {module:api/UserApi~getUserUserUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserUserUserIdGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserUserUserIdGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsersUserGet operation.
     * @callback module:api/UserApi~listUsersUserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * Get account data from a user by its id.  Needs admin or user-manager role.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [inclDeactivated = false)] Also list deactivated users.
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {String} [orderBy] 
     * @param {Boolean} [orderDesc = false)] 
     * @param {module:api/UserApi~listUsersUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseUser}
     */
    listUsersUserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'incl_deactivated': opts['inclDeactivated'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_desc': opts['orderDesc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResponseUser;
      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setMyPasswordUserMePasswordPut operation.
     * @callback module:api/UserApi~setMyPasswordUserMePasswordPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set My Password
     * Set my password if i am a 'local' user. If my account was provisioned via an external OpenID Connect provider this does nothing except the return value will be `false`.
     * @param {Object} opts Optional parameters
     * @param {String} [oldPassword] 
     * @param {String} [newPassword] 
     * @param {String} [newPasswordRepeated] For good measure we require the password twice to mitiage typos.
     * @param {module:api/UserApi~setMyPasswordUserMePasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    setMyPasswordUserMePasswordPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'old_password': opts['oldPassword'],
        'new_password': opts['newPassword'],
        'new_password_repeated': opts['newPasswordRepeated']
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/me/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserPasswordUserUserIdPasswordPut operation.
     * @callback module:api/UserApi~setUserPasswordUserUserIdPasswordPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set User Password
     * Set a local users password. If the user is provisioned via an external OpenID Connect provider this does nothing except the return value will be `false`.  Needs admin or user-manager role.
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {String} [newPassword] 
     * @param {String} [newPasswordRepeated] For good measure we require the password twice to mitiage typos.
     * @param {module:api/UserApi~setUserPasswordUserUserIdPasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    setUserPasswordUserUserIdPasswordPut(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling setUserPasswordUserUserIdPasswordPut");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'new_password': opts['newPassword'],
        'new_password_repeated': opts['newPasswordRepeated']
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{user_id}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMyselfUserMePatch operation.
     * @callback module:api/UserApi~updateMyselfUserMePatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Myself
     * Update my user account data.
     * @param {module:model/UserUpdateByUser} userUpdateByUser 
     * @param {module:api/UserApi~updateMyselfUserMePatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateMyselfUserMePatch(userUpdateByUser, callback) {
      let postBody = userUpdateByUser;
      // verify the required parameter 'userUpdateByUser' is set
      if (userUpdateByUser === undefined || userUpdateByUser === null) {
        throw new Error("Missing the required parameter 'userUpdateByUser' when calling updateMyselfUserMePatch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/me', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserUserUserIdPatch operation.
     * @callback module:api/UserApi~updateUserUserUserIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User
     * Get account data from a user by its id. Needs admin or user-manager role.
     * @param {String} userId 
     * @param {module:model/UserUpdateByAdmin} userUpdateByAdmin 
     * @param {module:api/UserApi~updateUserUserUserIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateUserUserUserIdPatch(userId, userUpdateByAdmin, callback) {
      let postBody = userUpdateByAdmin;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserUserUserIdPatch");
      }
      // verify the required parameter 'userUpdateByAdmin' is set
      if (userUpdateByAdmin === undefined || userUpdateByAdmin === null) {
        throw new Error("Missing the required parameter 'userUpdateByAdmin' when calling updateUserUserUserIdPatch");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user/{user_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
