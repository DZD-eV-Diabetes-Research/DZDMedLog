/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import PaginatedResponseStudy from '../model/PaginatedResponseStudy';
import Study from '../model/Study';
import StudyCreate from '../model/StudyCreate';
import StudyUpdate from '../model/StudyUpdate';

/**
* Study service.
* @module api/StudyApi
* @version 0.0.1
*/
export default class StudyApi {

    /**
    * Constructs a new StudyApi. 
    * @alias module:api/StudyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createStudyStudyPost operation.
     * @callback module:api/StudyApi~createStudyStudyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Study} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Study
     * Create a new study. Needs admin role.
     * @param {module:model/StudyCreate} studyCreate 
     * @param {module:api/StudyApi~createStudyStudyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Study}
     */
    createStudyStudyPost(studyCreate, callback) {
      let postBody = studyCreate;
      // verify the required parameter 'studyCreate' is set
      if (studyCreate === undefined || studyCreate === null) {
        throw new Error("Missing the required parameter 'studyCreate' when calling createStudyStudyPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Study;
      return this.apiClient.callApi(
        '/study', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStudyStudyStudyIdDelete operation.
     * @callback module:api/StudyApi~deleteStudyStudyStudyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Study
     * Delete existing study - Not Yet Implented
     * @param {String} studyId 
     * @param {module:api/StudyApi~deleteStudyStudyStudyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStudyStudyStudyIdDelete(studyId, callback) {
      let postBody = null;
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling deleteStudyStudyStudyIdDelete");
      }

      let pathParams = {
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/study/{study_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listStudiesStudyGet operation.
     * @callback module:api/StudyApi~listStudiesStudyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedResponseStudy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Studies
     * List all studies the user has access too.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [showDeactived = false)] 
     * @param {Number} [offset = 0)] 
     * @param {Number} [limit = 100)] 
     * @param {String} [orderBy] 
     * @param {Boolean} [orderDesc = false)] 
     * @param {module:api/StudyApi~listStudiesStudyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedResponseStudy}
     */
    listStudiesStudyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'show_deactived': opts['showDeactived'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_desc': opts['orderDesc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedResponseStudy;
      return this.apiClient.callApi(
        '/study', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStudyStudyStudyIdPatch operation.
     * @callback module:api/StudyApi~updateStudyStudyStudyIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Study} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Study
     * Update existing study
     * @param {String} studyId 
     * @param {module:model/StudyUpdate} studyUpdate 
     * @param {module:api/StudyApi~updateStudyStudyStudyIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Study}
     */
    updateStudyStudyStudyIdPatch(studyId, studyUpdate, callback) {
      let postBody = studyUpdate;
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling updateStudyStudyStudyIdPatch");
      }
      // verify the required parameter 'studyUpdate' is set
      if (studyUpdate === undefined || studyUpdate === null) {
        throw new Error("Missing the required parameter 'studyUpdate' when calling updateStudyStudyStudyIdPatch");
      }

      let pathParams = {
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Study;
      return this.apiClient.callApi(
        '/study/{study_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
