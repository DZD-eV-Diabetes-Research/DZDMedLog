/**
 * MedLog REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Interview from '../model/Interview';
import InterviewCreate from '../model/InterviewCreate';
import InterviewUpdate from '../model/InterviewUpdate';
import StudyId from '../model/StudyId';

/**
* Interview service.
* @module api/InterviewApi
* @version 0.0.1
*/
export default class InterviewApi {

    /**
    * Constructs a new InterviewApi. 
    * @alias module:api/InterviewApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInterviewStudyStudyIdEventEventIdInterviewPost operation.
     * @callback module:api/InterviewApi~createInterviewStudyStudyIdEventEventIdInterviewPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Interview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Interview
     * Create new interview
     * @param {String} eventId 
     * @param {module:model/StudyId} studyId 
     * @param {module:model/InterviewCreate} interviewCreate 
     * @param {module:api/InterviewApi~createInterviewStudyStudyIdEventEventIdInterviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Interview>}
     */
    createInterviewStudyStudyIdEventEventIdInterviewPost(eventId, studyId, interviewCreate, callback) {
      let postBody = interviewCreate;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling createInterviewStudyStudyIdEventEventIdInterviewPost");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling createInterviewStudyStudyIdEventEventIdInterviewPost");
      }
      // verify the required parameter 'interviewCreate' is set
      if (interviewCreate === undefined || interviewCreate === null) {
        throw new Error("Missing the required parameter 'interviewCreate' when calling createInterviewStudyStudyIdEventEventIdInterviewPost");
      }

      let pathParams = {
        'event_id': eventId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Interview];
      return this.apiClient.callApi(
        '/study/{study_id}/event/{event_id}/interview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInterviewStudyStudyIdEventEventIdInterviewInterviewIdDelete operation.
     * @callback module:api/InterviewApi~deleteInterviewStudyStudyIdEventEventIdInterviewInterviewIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Interview
     * Delete existing interview - Not Yet Implented
     * @param {String} interviewId 
     * @param {String} eventId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/InterviewApi~deleteInterviewStudyStudyIdEventEventIdInterviewInterviewIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInterviewStudyStudyIdEventEventIdInterviewInterviewIdDelete(interviewId, eventId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling deleteInterviewStudyStudyIdEventEventIdInterviewInterviewIdDelete");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling deleteInterviewStudyStudyIdEventEventIdInterviewInterviewIdDelete");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling deleteInterviewStudyStudyIdEventEventIdInterviewInterviewIdDelete");
      }

      let pathParams = {
        'interview_id': interviewId,
        'event_id': eventId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/study/{study_id}/event/{event_id}/interview/{interview_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInterviewStudyStudyIdEventEventIdInterviewInterviewIdGet operation.
     * @callback module:api/InterviewApi~getInterviewStudyStudyIdEventEventIdInterviewInterviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Interview
     * Get a certain interview by its id.
     * @param {String} eventId 
     * @param {String} interviewId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/InterviewApi~getInterviewStudyStudyIdEventEventIdInterviewInterviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interview}
     */
    getInterviewStudyStudyIdEventEventIdInterviewInterviewIdGet(eventId, interviewId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling getInterviewStudyStudyIdEventEventIdInterviewInterviewIdGet");
      }
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling getInterviewStudyStudyIdEventEventIdInterviewInterviewIdGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling getInterviewStudyStudyIdEventEventIdInterviewInterviewIdGet");
      }

      let pathParams = {
        'event_id': eventId,
        'interview_id': interviewId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Interview;
      return this.apiClient.callApi(
        '/study/{study_id}/event/{event_id}/interview/{interview_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastGet operation.
     * @callback module:api/InterviewApi~getLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Last Completed Interview
     * Get the last completed interview of proband.
     * @param {String} probandId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/InterviewApi~getLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interview}
     */
    getLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastGet(probandId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'probandId' is set
      if (probandId === undefined || probandId === null) {
        throw new Error("Missing the required parameter 'probandId' when calling getLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling getLastCompletedInterviewStudyStudyIdProbandProbandIdInterviewLastGet");
      }

      let pathParams = {
        'proband_id': probandId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Interview;
      return this.apiClient.callApi(
        '/study/{study_id}/proband/{proband_id}/interview/last', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastNonCompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentGet operation.
     * @callback module:api/InterviewApi~getLastNonCompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Last Non Completed Interview
     * Get the latest non completed interview of proband.
     * @param {String} probandId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/InterviewApi~getLastNonCompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interview}
     */
    getLastNonCompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentGet(probandId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'probandId' is set
      if (probandId === undefined || probandId === null) {
        throw new Error("Missing the required parameter 'probandId' when calling getLastNonCompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling getLastNonCompletedInterviewStudyStudyIdProbandProbandIdInterviewCurrentGet");
      }

      let pathParams = {
        'proband_id': probandId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Interview;
      return this.apiClient.callApi(
        '/study/{study_id}/proband/{proband_id}/interview/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllInterviewsOfStudyStudyStudyIdInterviewGet operation.
     * @callback module:api/InterviewApi~listAllInterviewsOfStudyStudyStudyIdInterviewGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Interview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All Interviews Of Study
     * List all interviews of one study.
     * @param {module:model/StudyId} studyId 
     * @param {module:api/InterviewApi~listAllInterviewsOfStudyStudyStudyIdInterviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Interview>}
     */
    listAllInterviewsOfStudyStudyStudyIdInterviewGet(studyId, callback) {
      let postBody = null;
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling listAllInterviewsOfStudyStudyStudyIdInterviewGet");
      }

      let pathParams = {
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Interview];
      return this.apiClient.callApi(
        '/study/{study_id}/interview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInterviewsByStudyEventStudyStudyIdEventEventIdInterviewGet operation.
     * @callback module:api/InterviewApi~listInterviewsByStudyEventStudyStudyIdEventEventIdInterviewGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Interview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Interviews By Study Event
     * List all interviews of an event.
     * @param {String} eventId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/InterviewApi~listInterviewsByStudyEventStudyStudyIdEventEventIdInterviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Interview>}
     */
    listInterviewsByStudyEventStudyStudyIdEventEventIdInterviewGet(eventId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling listInterviewsByStudyEventStudyStudyIdEventEventIdInterviewGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling listInterviewsByStudyEventStudyStudyIdEventEventIdInterviewGet");
      }

      let pathParams = {
        'event_id': eventId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Interview];
      return this.apiClient.callApi(
        '/study/{study_id}/event/{event_id}/interview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInterviewsOfProbandStudyStudyIdProbandProbandIdInterviewGet operation.
     * @callback module:api/InterviewApi~listInterviewsOfProbandStudyStudyIdProbandProbandIdInterviewGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Interview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Interviews Of Proband
     * List all interviews of one proband.
     * @param {String} probandId 
     * @param {module:model/StudyId} studyId 
     * @param {module:api/InterviewApi~listInterviewsOfProbandStudyStudyIdProbandProbandIdInterviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Interview>}
     */
    listInterviewsOfProbandStudyStudyIdProbandProbandIdInterviewGet(probandId, studyId, callback) {
      let postBody = null;
      // verify the required parameter 'probandId' is set
      if (probandId === undefined || probandId === null) {
        throw new Error("Missing the required parameter 'probandId' when calling listInterviewsOfProbandStudyStudyIdProbandProbandIdInterviewGet");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling listInterviewsOfProbandStudyStudyIdProbandProbandIdInterviewGet");
      }

      let pathParams = {
        'proband_id': probandId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Interview];
      return this.apiClient.callApi(
        '/study/{study_id}/proband/{proband_id}/interview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatch operation.
     * @callback module:api/InterviewApi~updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Interview
     * Update existing interview
     * @param {String} interviewId 
     * @param {String} eventId 
     * @param {module:model/StudyId} studyId 
     * @param {module:model/InterviewUpdate} interviewUpdate 
     * @param {module:api/InterviewApi~updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interview}
     */
    updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatch(interviewId, eventId, studyId, interviewUpdate, callback) {
      let postBody = interviewUpdate;
      // verify the required parameter 'interviewId' is set
      if (interviewId === undefined || interviewId === null) {
        throw new Error("Missing the required parameter 'interviewId' when calling updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatch");
      }
      // verify the required parameter 'eventId' is set
      if (eventId === undefined || eventId === null) {
        throw new Error("Missing the required parameter 'eventId' when calling updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatch");
      }
      // verify the required parameter 'studyId' is set
      if (studyId === undefined || studyId === null) {
        throw new Error("Missing the required parameter 'studyId' when calling updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatch");
      }
      // verify the required parameter 'interviewUpdate' is set
      if (interviewUpdate === undefined || interviewUpdate === null) {
        throw new Error("Missing the required parameter 'interviewUpdate' when calling updateInterviewStudyStudyIdEventEventIdInterviewInterviewIdPatch");
      }

      let pathParams = {
        'interview_id': interviewId,
        'event_id': eventId,
        'study_id': studyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Interview;
      return this.apiClient.callApi(
        '/study/{study_id}/event/{event_id}/interview/{interview_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
