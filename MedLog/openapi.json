{"openapi": "3.1.0", "info": {"title": "MedLog REST API", "version": "0.8.1.dev16+ga7e6f09.d20250707"}, "paths": {"/api/health": {"get": {"tags": ["Health"], "summary": "Get Health Status", "description": "Get the basic health state of the system.", "operationId": "get_health_status_api_health_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HealthCheck"}}}}}}}, "/api/health/report": {"get": {"tags": ["Health"], "summary": "Get Health Report", "description": "Get a more detailed health report of the system.", "operationId": "get_health_report_api_health_report_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HealthCheckReport"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/config/version": {"get": {"tags": ["Config"], "summary": "Get Version", "description": "Get the basic health state of the system.", "operationId": "get_version_api_config_version_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AppVersion"}}}}}}}, "/api/auth/schemes": {"get": {"tags": ["Auth"], "summary": "List Auth Schemes", "operationId": "list_auth_schemes_api_auth_schemes_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/AuthScheme"}, "type": "array", "title": "Response List Auth Schemes Api Auth Schemes Get"}}}}}}}, "/api/auth/refresh": {"post": {"tags": ["Auth"], "summary": "Get Fresh Access Token", "description": "Endpoint to get a new/fresh access token. A valid refresh token must be provided. Accepts the refresh token either as a form field **OR** in the 'refresh-token' header field.<br>Returns a new access token on success.", "operationId": "get_fresh_access_token_api_auth_refresh_post", "parameters": [{"name": "refresh-token", "in": "header", "required": false, "schema": {"type": "string", "description": "Refresh token via `refresh-token` header field", "title": "Refresh-Token"}, "description": "Refresh token via `refresh-token` header field", "example": "Bearer S0VLU0UhIExFQ0tFUiEK"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_get_fresh_access_token_api_auth_refresh_post"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JWTAccessTokenResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/auth/token": {"post": {"tags": ["Auth"], "summary": "Login For Refresh And Access Token", "operationId": "Login_for_refresh_and_access_token_api_auth_token_post", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_Login_for_refresh_and_access_token_api_auth_token_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JWTBundleTokenResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/auth/oidc/login/mockup-server-oidc": {"get": {"tags": ["Auth"], "summary": "Login Medlogmockupserveroidc", "description": "Redirect to login with the external OpenID Connect provider 'Mockup Server OIDC'", "operationId": "login_medlogmockupserveroidc_api_auth_oidc_login_mockup_server_oidc_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/auth/oidc/token/mockup-server-oidc": {"get": {"tags": ["Auth"], "summary": "Medlogmockupserveroidc", "description": "The 'Redirect URIs' for the external OpenID Connect providers 'Mockup Server OIDC' token transfer", "operationId": "medlogmockupserveroidc_api_auth_oidc_token_mockup_server_oidc_get", "parameters": [{"name": "code", "in": "query", "required": false, "schema": {"type": "string", "title": "Code"}}, {"name": "state", "in": "query", "required": false, "schema": {"type": "string", "title": "State"}}], "responses": {"200": {"description": "a OAuth2Token token to be used to authenticate against the API", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/JWTBundleTokenResponse"}}}}, "401": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPErrorResponeRepresentation"}}}, "description": "Unauthorized"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/role": {"get": {"tags": ["User"], "summary": "Get Roles", "description": "List available roles", "operationId": "Get_Roles_api_role_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserRoleApiRead"}, "type": "array", "title": "Response Get Roles Api Role Get"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/user": {"post": {"tags": ["User"], "summary": "Create Local User", "description": "Creates a new user in the local user database. Needs admin or user-manager role.", "operationId": "Create_local_user_api_user_post", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_password", "in": "query", "required": false, "schema": {"type": "string", "description": "The password for the created user. If non is defined the user will be created but not able to login until an admin user defines a password.", "title": "User Password"}, "description": "The password for the created user. If non is defined the user will be created but not able to login until an admin user defines a password."}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate", "description": "A json body with the user details"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "get": {"tags": ["User"], "summary": "List Users", "description": "Get account data from a user by its id.  Needs admin or user-manager role.", "operationId": "list_users_api_user_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "incl_deactivated", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Also list deactivated users.", "default": false, "title": "Incl Deactivated"}, "description": "Also list deactivated users."}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["created_at", "email", "display_name", "id", "roles", "deactivated", "is_email_verified", "user_name"], "type": "string", "description": "Order the result set by this attribute", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_User_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/user/me": {"get": {"tags": ["User"], "summary": "Get Myself", "description": "Get account data from the current user", "operationId": "get_myself_api_user_me_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["User"], "summary": "Update Myself", "description": "Update my user account data.", "operationId": "update_myself_api_user_me_patch", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdateByUser"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/user/me/password": {"put": {"tags": ["User"], "summary": "Set My Password", "description": "Set my password if i am a 'local' user. If my account was provisioned via an external OpenID Connect provider this does nothing except the return value will be `false`.", "operationId": "set_my_password_api_user_me_password_put", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_set_my_password_api_user_me_password_put"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "boolean", "title": "Response Set My Password Api User Me Password Put"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/user/{user_id}": {"get": {"tags": ["User"], "summary": "Get User", "description": "Get account data from a user by its id. Needs admin or user-manager role.", "operationId": "get_user_api_user__user_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"tags": ["User"], "summary": "Update User", "description": "Get account data from a user by its id. Needs admin or user-manager role.", "operationId": "update_user_api_user__user_id__patch", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "User Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdateByAdmin", "description": "The user object with changed data"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/user/{user_id}/password": {"put": {"tags": ["User"], "summary": "Set User Password", "description": "Set a local users password. If the user is provisioned via an external OpenID Connect provider this does nothing except the return value will be `false`.  Needs admin or user-manager role.", "operationId": "set_user_password_api_user__user_id__password_put", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "User Id"}}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_set_user_password_api_user__user_id__password_put"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "boolean", "title": "Response Set User Password Api User  User Id  Password Put"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study": {"get": {"tags": ["Study"], "summary": "List Studies", "description": "List all studies the user has access too.", "operationId": "list_studies_api_study_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "show_deactived", "in": "query", "required": false, "schema": {"type": "boolean", "default": false, "title": "Show Deactived"}}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["created_at", "display_name", "no_permissions", "deactivated", "id"], "type": "string", "description": "Order the result set by this attribute", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_Study_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["Study"], "summary": "Create Study", "description": "Create a new study. Needs admin role.", "operationId": "create_study_api_study_post", "security": [{"OAuth2PasswordBearer": []}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StudyCreateAPI"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Study"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}": {"patch": {"tags": ["Study"], "summary": "Update Study", "description": "Update existing study", "operationId": "update_study_api_study__study_id__patch", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StudyUpdate", "description": "The study object with updated data"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Study"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Study"], "summary": "Delete Study", "description": "Delete existing study - Not Yet Implented", "operationId": "delete_study_api_study__study_id__delete", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Study Id"}}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Unauthorized"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/permissions": {"get": {"tags": ["Study Permissions"], "summary": "List Study Permissions", "description": "List all access permissons for a study. User must be system admin, system user manager or study admin to see these.", "operationId": "list_study_permissions_api_study__study_id__permissions_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["is_study_viewer", "is_study_interviewer", "is_study_admin", "study_id", "user_id", "id"], "type": "string", "description": "Order the result set by this attribute", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_StudyPermissionRead_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/permissions/{permission_id}": {"get": {"tags": ["Study Permissions"], "summary": "Get Permission Details", "description": "List all medicine intakes of one probands last completed interview.", "operationId": "get_permission_details_api_study__study_id__permissions__permission_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "permission_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Permission Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StudyPermisson"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/permissions/{user_id}": {"put": {"tags": ["Study Permissions"], "summary": "Create Or Update Permission", "description": "Create or update new study permision for a user.", "operationId": "create_or_update_permission_api_study__study_id__permissions__user_id__put", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "User Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StudyPermissonUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StudyPermissonUpdate"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/event": {"get": {"tags": ["Event"], "summary": "List Events", "description": "List all events of a study.", "operationId": "list_events_api_study__study_id__event_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["created_at", "order_position", "name", "study_id", "id"], "type": "string", "description": "Order the result set by this attribute", "default": "order_position", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_Event_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["Event"], "summary": "Create Event", "description": "Create a new event.", "operationId": "create_event_api_study__study_id__event_post", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventCreateAPI"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/event/{event_id}": {"patch": {"tags": ["Event"], "summary": "Update Event", "description": "Update existing event", "operationId": "update_event_api_study__study_id__event__event_id__patch", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "event_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Event Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Event"], "summary": "Delete Event", "description": "Delete existing event - Not Yet Implented", "operationId": "delete_event_api_study__study_id__event__event_id__delete", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "event_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Event Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Unauthorized"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/event/order": {"post": {"tags": ["Event"], "summary": "Reorder Events", "description": "This endpoint accepts a list of event objects or IDs and assigns a sequential integer to each event's order_position attribute based on their order in the input list. The first event in the list will be assigned `order_position`: `10`, the second event will be assigned  `order_position`: `20`, and so on.", "operationId": "reorder_events_api_study__study_id__event_order_post", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "reverse", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Reorder events in the reversed order as given", "default": false, "title": "Reverse"}, "description": "Reorder events in the reversed order as given"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "array", "items": {"anyOf": [{"$ref": "#/components/schemas/EventRead"}, {"$ref": "#/components/schemas/Event"}, {"type": "string", "format": "uuid"}, {"type": "string"}]}, "title": "Events"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/EventRead"}, "title": "Response Reorder Events Api Study  Study Id  Event Order Post"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/event": {"get": {"tags": ["Event"], "summary": "List Events Per Proband", "description": "List all events and include the interview count on a per proband level.", "operationId": "list_events_per_proband_api_study__study_id__proband__proband_id__event_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "exlude_empty_events", "in": "query", "required": false, "schema": {"type": "boolean", "description": "If set to `true`, only events with at least one existing interview for the given `proband_id` will be listed.", "default": false, "title": "Exlude Empty Events"}, "description": "If set to `true`, only events with at least one existing interview for the given `proband_id` will be listed."}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["created_at", "order_position", "name", "study_id", "id"], "type": "string", "description": "Order the result set by this attribute", "default": "order_position", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_EventReadPerProband_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/interview": {"get": {"tags": ["Interview"], "summary": "List All Interviews Of Study", "description": "List all interviews of one study.", "operationId": "list_all_interviews_of_study_api_study__study_id__interview_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Interview"}, "title": "Response List All Interviews Of Study Api Study  Study Id  Interview Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/event/{event_id}/interview": {"get": {"tags": ["Interview"], "summary": "List Interviews By Study Event", "description": "List all interviews of an event.", "operationId": "list_interviews_by_study_event_api_study__study_id__event__event_id__interview_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "event_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Event Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Interview"}, "title": "Response List Interviews By Study Event Api Study  Study Id  Event  Event Id  Interview Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["Interview"], "summary": "Create Interview", "description": "Create new interview", "operationId": "create_interview_api_study__study_id__event__event_id__interview_post", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "event_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Event Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InterviewCreateAPI"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Interview"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/event/{event_id}/interview/{interview_id}": {"get": {"tags": ["Interview"], "summary": "Get Interview", "description": "Get a certain interview by its id.", "operationId": "get_interview_api_study__study_id__event__event_id__interview__interview_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "event_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Event Id"}}, {"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Interview"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"tags": ["Interview"], "summary": "Update Interview", "description": "Update existing interview", "operationId": "update_interview_api_study__study_id__event__event_id__interview__interview_id__patch", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "event_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Event Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/InterviewUpdateAPI"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Interview"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Interview"], "summary": "Delete Interview", "description": "Delete existing interview - Not Yet Implented", "operationId": "delete_interview_api_study__study_id__event__event_id__interview__interview_id__delete", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "event_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Event Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"204": {"description": "Successful Response"}, "401": {"description": "Unauthorized"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/interview": {"get": {"tags": ["Interview"], "summary": "List Interviews Of Proband", "description": "List all interviews of one proband.", "operationId": "list_interviews_of_proband_api_study__study_id__proband__proband_id__interview_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Interview"}, "title": "Response List Interviews Of Proband Api Study  Study Id  Proband  Proband Id  Interview Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/interview/last": {"get": {"tags": ["Interview"], "summary": "Get Last Completed Interview", "description": "Get the last completed interview of proband.", "operationId": "get_last_completed_interview_api_study__study_id__proband__proband_id__interview_last_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Interview"}, {"type": "null"}], "title": "Response Get Last Completed Interview Api Study  Study Id  Proband  Proband Id  Interview Last Get"}}}}, "204": {"description": "No interview exists yet.", "headers": {"X-Reason": {"description": "Reason why no content was returned", "schema": {"type": "string", "example": "No interview exist yet"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/interview/current": {"get": {"tags": ["Interview"], "summary": "Get Last Non Completed Interview", "description": "Get the latest non completed interview of proband.", "operationId": "get_last_non_completed_interview_api_study__study_id__proband__proband_id__interview_current_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Interview"}, {"type": "null"}], "title": "Response Get Last Non Completed Interview Api Study  Study Id  Proband  Proband Id  Interview Current Get"}}}}, "204": {"description": "No interview exists yet.", "headers": {"X-Reason": {"description": "Reason why no content was returned", "schema": {"type": "string", "example": "No interview exist yet"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/interview/{interview_id}/intake/{intake_id}": {"get": {"tags": ["Intake"], "summary": "Get Intake", "description": "Get a certain intake record by it id", "operationId": "get_intake_api_study__study_id__interview__interview_id__intake__intake_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "intake_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Intake Id"}}, {"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Intake"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"tags": ["Intake"], "summary": "Update Intake", "description": "Update intake record. user must have at least 'interviewer'-permissions on study.", "operationId": "update_intake_api_study__study_id__interview__interview_id__intake__intake_id__patch", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "intake_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Intake Id"}}, {"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IntakeUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Intake"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Intake"], "summary": "Delete Intake", "description": "Update intake record. user must have at least 'interviewer'-permissions on study.", "operationId": "delete_intake_api_study__study_id__interview__interview_id__intake__intake_id__delete", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "intake_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Intake Id"}}, {"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/interview/{interview_id}/intake": {"post": {"tags": ["Intake"], "summary": "Create Intake", "description": "Create intake record in certain interview. user must have at least 'interviewer'-permissions on study.", "operationId": "create_intake_api_study__study_id__interview__interview_id__intake_post", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/IntakeCreateAPI"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Intake"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "get": {"tags": ["Intake"], "summary": "List All Intakes Of Interview", "description": "List all medicine intakes of interview.", "operationId": "list_all_intakes_of_interview_api_study__study_id__interview__interview_id__intake_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "interview_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Interview Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Intake"}, "title": "Response List All Intakes Of Interview Api Study  Study Id  Interview  Interview Id  Intake Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/intake": {"get": {"tags": ["Intake"], "summary": "List All Intakes", "description": "List all medicine intakes of one proband.", "operationId": "list_all_intakes_api_study__study_id__proband__proband_id__intake_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "interview_id", "in": "query", "required": false, "schema": {"type": "string", "format": "uuid", "description": "Filter intakes by a certain interview.", "title": "Interview Id"}, "description": "Filter intakes by a certain interview."}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["created_at", "source_of_drug_information", "intake_start_time_utc", "intake_end_time_utc", "administered_by_doctor", "intake_regular_or_as_needed", "dose_per_day", "regular_intervall_of_daily_dose", "as_needed_dose_unit", "consumed_meds_today", "drug_id", "id", "interview_id"], "type": "string", "description": "Order the result set by this attribute", "default": "created_at", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_Intake_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/intake/details": {"get": {"tags": ["Intake"], "summary": "List All Intakes Detailed", "description": "List all medicine intakes of one proband, but as detailed table that includes Event, Interview and Drug details.", "operationId": "list_all_intakes_detailed_api_study__study_id__proband__proband_id__intake_details_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "interview_id", "in": "query", "required": false, "schema": {"type": "string", "format": "uuid", "description": "Filter intakes by a certain interview.", "title": "Interview Id"}, "description": "Filter intakes by a certain interview."}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["created_at", "source_of_drug_information", "intake_start_time_utc", "intake_end_time_utc", "administered_by_doctor", "intake_regular_or_as_needed", "dose_per_day", "regular_intervall_of_daily_dose", "as_needed_dose_unit", "consumed_meds_today", "drug_id", "id", "interview_id"], "type": "string", "description": "Order the result set by this attribute", "default": "created_at", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_IntakeDetailListItem_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/interview/last/intake": {"get": {"tags": ["Intake"], "summary": "List All Intakes Of Last Completed Interview", "description": "List all medicine intakes of one probands last completed interview.", "operationId": "list_all_intakes_of_last_completed_interview_api_study__study_id__proband__proband_id__interview_last_intake_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Intake"}, "title": "Response List All Intakes Of Last Completed Interview Api Study  Study Id  Proband  Proband Id  Interview Last Intake Get"}}}}, "204": {"description": "No interview exists yet.", "headers": {"X-Reason": {"description": "Reason why no content was returned", "schema": {"type": "string", "example": "No interview exist yet"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/interview/last/intake/details": {"get": {"tags": ["Intake"], "summary": "List All Intakes Of Last Completed Interview Detailed", "description": "List all medicine intakes of one probands last completed interview with all drug details attached.", "operationId": "list_all_intakes_of_last_completed_interview_detailed_api_study__study_id__proband__proband_id__interview_last_intake_details_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/IntakeDetailListItem"}, "title": "Response List All Intakes Of Last Completed Interview Detailed Api Study  Study Id  Proband  Proband Id  Interview Last Intake Details Get"}}}}, "204": {"description": "No interview exists yet.", "headers": {"X-Reason": {"description": "Reason why no content was returned", "schema": {"type": "string", "example": "No interview exist yet"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/interview/current/intake": {"get": {"tags": ["Intake"], "summary": "List All Intakes Of Last Uncompleted Interview", "description": "List all medicine intakes of one probands current (non completed / Interview.interview_end_time_utc is None) interview.", "operationId": "list_all_intakes_of_last_uncompleted_interview_api_study__study_id__proband__proband_id__interview_current_intake_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Intake"}, "title": "Response List All Intakes Of Last Uncompleted Interview Api Study  Study Id  Proband  Proband Id  Interview Current Intake Get"}}}}, "204": {"description": "No interview exists yet.", "headers": {"X-Reason": {"description": "Reason why no content was returned", "schema": {"type": "string", "example": "No interview exist yet"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/proband/{proband_id}/interview/current/intake/details": {"get": {"tags": ["Intake"], "summary": "List All Intakes Of Last Uncompleted Interview Detailed", "description": "List all medicine intakes of one probands last completed interview with all details attached.", "operationId": "list_all_intakes_of_last_uncompleted_interview_detailed_api_study__study_id__proband__proband_id__interview_current_intake_details_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "proband_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Proband Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/IntakeDetailListItem"}, "title": "Response List All Intakes Of Last Uncompleted Interview Detailed Api Study  Study Id  Proband  Proband Id  Interview Current Intake Details Get"}}}}, "204": {"description": "No interview exists yet.", "headers": {"X-Reason": {"description": "Reason why no content was returned", "schema": {"type": "string", "example": "No interview exist yet"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/drug/search": {"get": {"tags": ["Drug"], "summary": "Search Drugs", "description": "List all medicine/drugs from the system. Needs admin role.", "operationId": "search_drugs_api_drug_search_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "search_term", "in": "query", "required": true, "schema": {"type": "string", "minLength": 3, "description": "A search term. Can be multiple words or a single one. One word must be at least 3 chars or contained in a longer quoted string (e.g. `'Salofalk 1 g'` instead of `Salofalk 1 g`)", "title": "Search Term"}, "description": "A search term. Can be multiple words or a single one. One word must be at least 3 chars or contained in a longer quoted string (e.g. `'Salofalk 1 g'` instead of `Salofalk 1 g`)"}, {"name": "market_accessable", "in": "query", "required": false, "schema": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "description": "'null': List all drugs, 'true': List only drug that are currently available on the market. 'false': List only drugs that are not market accessable anymore.", "title": "Market Accessable"}, "description": "'null': List all drugs, 'true': List only drug that are currently available on the market. 'false': List only drugs that are not market accessable anymore."}, {"name": "filter_darreichungsform", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Filter Darreichungsform"}}, {"name": "filter_vertriebsstatus", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Filter Vertriebsstatus"}}, {"name": "filter_normgroesse", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Filter Normgroesse"}}, {"name": "filter_abgabestatus", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Filter Abgabestatus"}}, {"name": "filter_lebensmittel", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Filter Lebensmittel"}}, {"name": "filter_diaetetikum", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Filter Diaetetikum"}}, {"name": "filter_hersteller", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Filter Hersteller"}}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["id", "trade_name", "market_access_date", "market_exit_date", "is_custom_drug", "custom_drug_notes", "custom_created_by", "codes", "attrs", "attrs_multi"], "type": "string", "description": "Order the result set by this attribute", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_MedLogSearchEngineResult_"}}}}, "425": {"description": "Index in build up error </br>The Index is still busy being build and therefore no search is available at the moment. </br>The Error detail message will be: `The search index is not ready yet. Please try it later`"}, "503": {"description": "No search engine configured. </br>This can happen if the config is borked. By default search engine settings it wont.</br> The Error detail message will be: `The search index is not configured. Please contact the admin.`"}, "500": {"description": "Other Errors. </br>If anything else goes wrong on server side."}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/drug/id/{drug_id}": {"get": {"tags": ["Drug"], "summary": "Get Drug", "description": "Get a certain drug by its id", "operationId": "get_drug_api_drug_id__drug_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "drug_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Drug Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Drug__1"}, {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Drug__2"}], "title": "Response Get Drug Api Drug Id  Drug Id  Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/drug/field_def": {"get": {"tags": ["Drug"], "summary": "List Field Definitions", "description": "List all field definitions for the current drug dataset", "operationId": "list_field_definitions_api_drug_field_def_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DrugAttrFieldDefinitionContainer"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/drug/field_def/{field_name}": {"get": {"tags": ["Drug"], "summary": "Get Field Definition", "description": "Get enum field data for the certain field", "operationId": "get_field_definition_api_drug_field_def__field_name__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "field_name", "in": "path", "required": true, "schema": {"type": "string", "title": "Field Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DrugAttrFieldDefinitionAPIRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/drug/field_def/{field_name}/refs": {"get": {"tags": ["Drug"], "summary": "Get Reference Field Values", "description": "List possible values, display values, sort_oder of a LOV (List of values) for a reference field.", "operationId": "get_reference_field_values_api_drug_field_def__field_name__refs_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "field_name", "in": "path", "required": true, "schema": {"type": "string", "title": "Field Name"}}, {"name": "search_term", "in": "query", "required": false, "schema": {"type": "string", "description": "If a search term is provided the list will be filtered by this string", "title": "Search Term"}, "description": "If a search term is provided the list will be filtered by this string"}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["value", "display", "sort_order"], "type": "string", "description": "Order the result set by this attribute", "default": "sort_order", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_DrugAttrFieldLovItemAPIRead_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/drug/field_def/{field_name}/refs/{ref_val}": {"get": {"tags": ["Drug"], "summary": "Get Reference Field Value", "description": "get a certain values, display values, sort_oder of a LOV (List of values) for a reference field.", "operationId": "get_reference_field_value_api_drug_field_def__field_name__refs__ref_val__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "field_name", "in": "path", "required": true, "schema": {"type": "string", "title": "Field Name"}}, {"name": "ref_val", "in": "path", "required": true, "schema": {"type": "string", "title": "Ref Val"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DrugAttrFieldLovItemAPIRead"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/drug/code_def": {"get": {"tags": ["Drug"], "summary": "List Drug Code Systems", "description": "List all drug coding system used in the current drug dataset.", "operationId": "list_drug_code_systems_api_drug_code_def_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/DrugCodeSystem"}, "type": "array", "title": "Response List Drug Code Systems Api Drug Code Def Get"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/drug/code_def/{code_id}": {"get": {"tags": ["Drug"], "summary": "Get Drug Code Details", "description": "List detail if a specific drug code system", "operationId": "get_drug_code_details_api_drug_code_def__code_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "code_id", "in": "path", "required": true, "schema": {"type": "string", "title": "Code Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DrugCodeSystem"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/drug/custom": {"post": {"tags": ["Drug"], "summary": "Create Custom Drug", "description": "Add a custom drug to the drug database. Should be used as a last resort if the user can not find a specific drug in the search.", "operationId": "create_custom_drug_api_drug_custom_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/DrugCustomCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Drug__2"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/study/{study_id}/export": {"get": {"tags": ["Export"], "summary": "List Export Jobs", "description": "List export jobs.", "operationId": "list_export_jobs_api_study__study_id__export_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "filter_job_state", "in": "query", "required": false, "schema": {"anyOf": [{"$ref": "#/components/schemas/WorkerJobState"}, {"type": "null"}], "title": "Filter Job State"}}, {"name": "offset", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Specify the starting point for result sets/list", "default": 0, "title": "Offset"}, "description": "Specify the starting point for result sets/list"}, {"name": "limit", "in": "query", "required": false, "schema": {"type": "integer", "description": "Specify the max amount of result items", "default": 100, "title": "Limit"}, "description": "Specify the max amount of result items"}, {"name": "order_by", "in": "query", "required": false, "schema": {"enum": ["export_id", "state", "download_file_path", "created_at", "error", "export_format"], "type": "string", "description": "Order the result set by this attribute", "default": "created_at", "title": "Order By"}, "description": "Order the result set by this attribute"}, {"name": "order_desc", "in": "query", "required": false, "schema": {"type": "boolean", "description": "Flip the sorting order", "default": false, "title": "Order Desc"}, "description": "Flip the sorting order"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PaginatedResponse_ExportJob_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["Export"], "summary": "Create Export", "description": "Create a new export job. This will start a process in the background, which creates a export file. With the ID of the response model (ExportJob) you can query the state and later download the result files.", "operationId": "create_export_api_study__study_id__export_post", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}, {"name": "format", "in": "query", "required": false, "schema": {"enum": ["csv", "json"], "type": "string", "default": "csv", "title": "Format"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExportJob"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/export/{export_job_id}": {"get": {"tags": ["Export"], "summary": "Get Export", "description": "Get an existing export. This endpoint can be used to get the state or result download path", "operationId": "get_export_api_study__study_id__export__export_job_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "export_job_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Export Job Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ExportJob"}}}}, "404": {"description": "Export job does not exist.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/medlogserver__utils__Error__1"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/study/{study_id}/export/{export_job_id}/download": {"get": {"tags": ["Export"], "summary": "Download Export", "description": "Download the export. Job muste be in state `SUCCESS`", "operationId": "download_export_api_study__study_id__export__export_job_id__download_get", "parameters": [{"name": "export_job_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Export Job Id"}}, {"name": "study_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Study Id"}}], "responses": {"200": {"description": "Successful Response"}, "425": {"description": "Export job is not finished yet. Try again later.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/medlogserver__utils__Error__2"}}}}, "404": {"description": "Export job does not exist.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/medlogserver__utils__Error__3"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/": {"get": {"tags": ["WebClient"], "summary": "Serve Client Root", "operationId": "serve_client_root__get", "parameters": [{"name": "path_name", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Path Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/{path_name}": {"get": {"tags": ["WebClient"], "summary": "Serve Frontend Files", "operationId": "serve_frontend_files__path_name__get", "parameters": [{"name": "path_name", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Path Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"AdministeredByDoctorAnswers": {"type": "string", "enum": ["prescribed", "recommended", "no", "unknown"], "title": "AdministeredByDoctorAnswers"}, "AppVersion": {"properties": {"version": {"type": "string", "title": "Version", "description": "The version string of the application"}, "branch": {"type": "string", "title": "Branch", "description": "The branch this version was build from"}}, "type": "object", "required": ["version", "branch"], "title": "AppVersion"}, "AttrRefValAbgabestatus": {"properties": {"value": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/abgabestatus/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/abgabestatus/refs"}}, "type": "object", "title": "AttrRefValAbgabestatus"}, "AttrRefValDarreichungsform": {"properties": {"value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/darreichungsform/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/darreichungsform/refs"}}, "type": "object", "title": "AttrRefValDarreichungsform"}, "AttrRefValDiaetetikum": {"properties": {"value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/diaetetikum/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/diaetetikum/refs"}}, "type": "object", "title": "AttrRefValDiaetetikum"}, "AttrRefValLebensmittel": {"properties": {"value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/lebensmittel/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/lebensmittel/refs"}}, "type": "object", "title": "AttrRefValLebensmittel"}, "AttrRefValNormgroesse": {"properties": {"value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/normgroesse/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/normgroesse/refs"}}, "type": "object", "title": "AttrRefValNormgroesse"}, "Attrs": {"properties": {"amount": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Amount", "description": "Menge in der Produktpackung", "examples": ["3.5 g", "2x100 ml", "60 st"]}, "ist_verhuetungsmittel": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Ist Verhuetungsmittel", "description": "Ist das Produkt ein Verh\u00fctungsmittel", "examples": [true, false]}, "ist_kosmetikum": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Ist Kosmetikum", "description": "Ist das Produkt ein Kosmetikum", "examples": [true, false]}, "ist_nahrungsergaenzungsmittel": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Ist Nahrungsergaenzungsmittel", "description": "Ist das Produkt ein Nahrungserg\u00e4nzungsmittel", "examples": [true, false]}, "ist_pflanzlich": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Ist Pflanzlich", "description": "Ist das Produkt Pflanzlich", "examples": [true, false]}, "ist_generikum": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Ist Generikum", "description": "Ist das Produkt ein Generikum", "examples": [true, false]}, "ist_homoeopathisch": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Ist Homoeopathisch", "description": "Ist das Produkt Hom\u00f6opathisch", "examples": [true, false]}}, "type": "object", "title": "Attrs"}, "AttrsMulti": {"properties": {"ATC": {"items": {"type": "string"}, "type": "array", "title": "Atc", "description": "Anatomical Therapeutic Chemical code. A unique code assigned to a medicine according to the organ or system it works on and how it works. The classification system is maintained by the World Health Organization (WHO). ", "examples": [["D04AA04", "V60A"]]}}, "type": "object", "title": "AttrsMulti"}, "AuthScheme": {"properties": {"name": {"type": "string", "title": "Name"}, "slug": {"type": "string", "title": "Slug"}, "type": {"type": "string", "enum": ["oidc", "credentials"], "title": "Type"}, "login_endpoint": {"type": "string", "title": "Login Endpoint"}, "token_endpoint": {"type": "string", "title": "Token Endpoint"}}, "type": "object", "required": ["name", "slug", "type", "login_endpoint", "token_endpoint"], "title": "AuthScheme"}, "Body_Login_for_refresh_and_access_token_api_auth_token_post": {"properties": {"grant_type": {"anyOf": [{"type": "string", "pattern": "^password$"}, {"type": "null"}], "title": "Grant Type"}, "username": {"type": "string", "title": "Username"}, "password": {"type": "string", "title": "Password"}, "scope": {"type": "string", "title": "Scope", "default": ""}, "client_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Id"}, "client_secret": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Secret"}}, "type": "object", "required": ["username", "password"], "title": "Body_Login_for_refresh_and_access_token_api_auth_token_post"}, "Body_get_fresh_access_token_api_auth_refresh_post": {"properties": {"refresh_token_form": {"type": "string", "title": "Refresh Token Form"}}, "type": "object", "title": "Body_get_fresh_access_token_api_auth_refresh_post"}, "Body_set_my_password_api_user_me_password_put": {"properties": {"old_password": {"type": "string", "title": "Old Password"}, "new_password": {"type": "string", "title": "New Password"}, "new_password_repeated": {"type": "string", "title": "New Password Repeated", "description": "For good measure we require the password twice to mitiage typos."}}, "type": "object", "title": "Body_set_my_password_api_user_me_password_put"}, "Body_set_user_password_api_user__user_id__password_put": {"properties": {"new_password": {"type": "string", "title": "New Password"}, "new_password_repeated": {"type": "string", "title": "New Password Repeated", "description": "For good measure we require the password twice to mitigate typos."}}, "type": "object", "title": "Body_set_user_password_api_user__user_id__password_put"}, "ConsumedMedsTodayAnswers": {"type": "string", "enum": ["Yes", "No", "UNKNOWN"], "title": "ConsumedMedsTodayAnswers"}, "DrugAttrFieldDefinitionAPIRead": {"properties": {"field_name": {"type": "string", "title": "Field Name"}, "field_name_display": {"type": "string", "title": "Field Name Display", "description": "The title of the field for displaying humans"}, "field_desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Field Desc", "description": "Helptext for users about the content of the field. For internal documenation purposes see 'desc'"}, "optional": {"type": "boolean", "title": "Optional", "default": false}, "default": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Default"}, "is_reference_list_field": {"type": "boolean", "title": "Is Reference List Field", "description": "If true each value has a reference list with a display value. Values that are not in the reference list are not allowed. e.g. A drug can only be 'freely-available','pharmacy-only' or 'prescription-only'", "default": false}, "is_multi_val_field": {"type": "boolean", "title": "Is Multi Val Field", "description": "If true this field can hold a list of values instead of a single one. E.g. A drug can have a list of keywords.", "default": false}, "value_type": {"type": "string", "enum": ["STR", "INT", "FLOAT", "BOOL", "DATETIME", "DATE"], "title": "Value Type", "description": "The type of this value gets casted into, by the backend, as before its passing the RestAPI", "default": "STR"}, "show_in_search_results": {"type": "boolean", "title": "Show In Search Results", "description": "Should this Field be shown in search results. This is just an instruction field for the UI and has effect on the backend.", "default": true}, "used_for_custom_drug": {"type": "boolean", "title": "Used For Custom Drug", "description": "When creating a custom drug, should this field be used for the form in the UI. Atm this field is only an instruction field for the UI and is not validated.", "default": true}}, "type": "object", "required": ["field_name", "field_name_display"], "title": "DrugAttrFieldDefinitionAPIRead"}, "DrugAttrFieldDefinitionContainer": {"properties": {"attrs": {"items": {"$ref": "#/components/schemas/DrugAttrFieldDefinitionAPIRead"}, "type": "array", "title": "Attrs", "description": "Metadata for all 'Free-form field'-attributes a drug can have."}, "attrs_multi": {"items": {"$ref": "#/components/schemas/DrugAttrMultiFieldDefinitionAPIRead"}, "type": "array", "title": "Attrs Multi", "description": "Metadata for all 'Free-form field'-attributes a drug can have."}, "attrs_ref": {"items": {"$ref": "#/components/schemas/DrugAttrRefFieldDefinitionAPIRead"}, "type": "array", "title": "Attrs Ref", "description": "Metadata for all 'selection-field' attributes (aka 'list of values'-fields, 'enum'-field or 'reference'-field) a drug can have."}, "attrs_multi_ref": {"items": {"$ref": "#/components/schemas/DrugAttrMultiRefFieldDefinitionAPIRead"}, "type": "array", "title": "Attrs Multi Ref", "description": "Metadata for all 'selection-field' attributes (aka 'list of values'-fields, 'enum'-field or 'reference'-field) a drug can have."}}, "type": "object", "required": ["attrs", "attrs_multi", "attrs_ref", "attrs_multi_ref"], "title": "DrugAttrFieldDefinitionContainer"}, "DrugAttrFieldLovItemAPIRead": {"properties": {"value": {"type": "string", "title": "Value"}, "display": {"type": "string", "title": "Display"}, "sort_order": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Sort Order", "default": 0}}, "type": "object", "required": ["value", "display"], "title": "DrugAttrFieldLovItemAPIRead"}, "DrugAttrMultiFieldDefinitionAPIRead": {"properties": {"field_name": {"type": "string", "title": "Field Name"}, "field_name_display": {"type": "string", "title": "Field Name Display", "description": "The title of the field for displaying humans"}, "field_desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Field Desc", "description": "Helptext for users about the content of the field. For internal documenation purposes see 'desc'"}, "optional": {"type": "boolean", "title": "Optional", "default": false}, "default": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Default"}, "is_reference_list_field": {"type": "boolean", "title": "Is Reference List Field", "description": "If true each value has a reference list with a display value. Values that are not in the reference list are not allowed. e.g. A drug can only be 'freely-available','pharmacy-only' or 'prescription-only'", "default": false}, "is_multi_val_field": {"type": "boolean", "title": "Is Multi Val Field", "description": "If true this field can hold a list of values instead of a single one. E.g. A drug can have a list of keywords.", "default": true}, "value_type": {"type": "string", "enum": ["STR", "INT", "FLOAT", "BOOL", "DATETIME", "DATE"], "title": "Value Type", "description": "The type of this value gets casted into, by the backend, as before its passing the RestAPI", "default": "List[STR]"}, "show_in_search_results": {"type": "boolean", "title": "Show In Search Results", "description": "Should this Field be shown in search results. This is just an instruction field for the UI and has effect on the backend.", "default": true}, "used_for_custom_drug": {"type": "boolean", "title": "Used For Custom Drug", "description": "When creating a custom drug, should this field be used for the form in the UI. Atm this field is only an instruction field for the UI and is not validated.", "default": true}}, "type": "object", "required": ["field_name", "field_name_display"], "title": "DrugAttrMultiFieldDefinitionAPIRead"}, "DrugAttrMultiRefFieldDefinitionAPIRead": {"properties": {"field_name": {"type": "string", "title": "Field Name"}, "field_name_display": {"type": "string", "title": "Field Name Display", "description": "The title of the field for displaying humans"}, "field_desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Field Desc", "description": "Helptext for users about the content of the field. For internal documenation purposes see 'desc'"}, "optional": {"type": "boolean", "title": "Optional", "default": false}, "default": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Default"}, "is_reference_list_field": {"type": "boolean", "title": "Is Reference List Field", "description": "If true each value has a reference list with a display value. Values that are not in the reference list are not allowed. e.g. A drug can only be 'freely-available','pharmacy-only' or 'prescription-only'", "default": true}, "is_multi_val_field": {"type": "boolean", "title": "Is Multi Val Field", "description": "If true this field can hold a list of values instead of a single one. E.g. A drug can have a list of keywords.", "default": true}, "value_type": {"type": "string", "enum": ["STR", "INT", "FLOAT", "BOOL", "DATETIME", "DATE"], "title": "Value Type", "description": "The type of this value gets casted into, by the backend, as before its passing the RestAPI", "default": "STR"}, "show_in_search_results": {"type": "boolean", "title": "Show In Search Results", "description": "Should this Field be shown in search results. This is just an instruction field for the UI and has effect on the backend.", "default": true}, "used_for_custom_drug": {"type": "boolean", "title": "Used For Custom Drug", "description": "When creating a custom drug, should this field be used for the form in the UI. Atm this field is only an instruction field for the UI and is not validated.", "default": true}, "ref_list": {"type": "string", "title": "Ref List", "description": "API Path to the reference list values"}}, "type": "object", "required": ["field_name", "field_name_display"], "title": "DrugAttrMultiRefFieldDefinitionAPIRead"}, "DrugAttrRefFieldDefinitionAPIRead": {"properties": {"field_name": {"type": "string", "title": "Field Name"}, "field_name_display": {"type": "string", "title": "Field Name Display", "description": "The title of the field for displaying humans"}, "field_desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Field Desc", "description": "Helptext for users about the content of the field. For internal documenation purposes see 'desc'"}, "optional": {"type": "boolean", "title": "Optional", "default": false}, "default": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Default"}, "is_reference_list_field": {"type": "boolean", "title": "Is Reference List Field", "description": "If true each value has a reference list with a display value. Values that are not in the reference list are not allowed. e.g. A drug can only be 'freely-available','pharmacy-only' or 'prescription-only'", "default": true}, "is_multi_val_field": {"type": "boolean", "title": "Is Multi Val Field", "description": "If true this field can hold a list of values instead of a single one. E.g. A drug can have a list of keywords.", "default": false}, "value_type": {"type": "string", "enum": ["STR", "INT", "FLOAT", "BOOL", "DATETIME", "DATE"], "title": "Value Type", "description": "The type of this value gets casted into, by the backend, as before its passing the RestAPI", "default": "STR"}, "show_in_search_results": {"type": "boolean", "title": "Show In Search Results", "description": "Should this Field be shown in search results. This is just an instruction field for the UI and has effect on the backend.", "default": true}, "used_for_custom_drug": {"type": "boolean", "title": "Used For Custom Drug", "description": "When creating a custom drug, should this field be used for the form in the UI. Atm this field is only an instruction field for the UI and is not validated.", "default": true}, "ref_list": {"type": "string", "title": "Ref List", "description": "API Path to the reference list values"}}, "type": "object", "required": ["field_name", "field_name_display"], "title": "DrugAttrRefFieldDefinitionAPIRead"}, "DrugCodeApi": {"properties": {"code_system_id": {"type": "string", "title": "Code System Id"}, "code": {"type": "string", "title": "Code"}}, "type": "object", "required": ["code_system_id", "code"], "title": "DrugCodeApi"}, "DrugCodeSystem": {"properties": {"id": {"type": "string", "title": "Id", "description": "Shortname identifier for the national mmedication code system. Also the name for one code instance.", "examples": ["PZN", "NDC"]}, "name": {"type": "string", "title": "Name", "description": "Longname identifier for the national drug code system.", "examples": ["Pharmazentralnummer", "National Drug Code"]}, "country": {"type": "string", "title": "Country", "description": "Country that uses this system", "examples": ["Germany", "USA"]}, "desc": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Desc", "description": "Information about the code system"}, "optional": {"type": "boolean", "title": "Optional", "description": "Will every drug have such code or is it optional? This can be important when referencing drugs as we can only guarante a reference via code if it is non optional.", "default": false}, "unique": {"type": "boolean", "title": "Unique", "description": "Will every drug have a unique code or can multiple drug products can have the same code.", "default": true}, "client_visible": {"type": "boolean", "title": "Client Visible", "description": "Should the code be shown in the UI. Some IDs are internal and are not interesting for the client.", "default": true}}, "type": "object", "required": ["id", "name", "country"], "title": "DrugCodeSystem"}, "DrugCustomCreate": {"properties": {"trade_name": {"type": "string", "title": "Trade Name"}, "market_access_date": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Market Access Date"}, "market_exit_date": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Market Exit Date"}, "custom_drug_notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Custom Drug Notes", "description": "Additional notes for the custom drug."}, "attrs": {"anyOf": [{"items": {"$ref": "#/components/schemas/DrugValApiCreate"}, "type": "array"}, {"type": "null"}], "title": "Attrs"}, "attrs_multi": {"anyOf": [{"items": {"$ref": "#/components/schemas/DrugMultiValApiCreate"}, "type": "array"}, {"type": "null"}], "title": "Attrs Multi"}, "attrs_ref": {"anyOf": [{"items": {"$ref": "#/components/schemas/DrugValApiCreate"}, "type": "array"}, {"type": "null"}], "title": "Attrs Ref"}, "attrs_multi_ref": {"anyOf": [{"items": {"$ref": "#/components/schemas/DrugMultiValApiCreate"}, "type": "array"}, {"type": "null"}], "title": "Attrs Multi Ref"}, "codes": {"anyOf": [{"items": {"$ref": "#/components/schemas/DrugCodeApi"}, "type": "array"}, {"type": "null"}], "title": "Codes"}}, "type": "object", "required": ["trade_name"], "title": "DrugCustomCreate"}, "DrugMultiValApiCreate": {"properties": {"field_name": {"type": "string", "title": "Field Name"}, "values": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Values", "description": "Value of the drug attribute"}}, "type": "object", "required": ["field_name"], "title": "DrugMultiValApiCreate"}, "DrugValApiCreate": {"properties": {"field_name": {"type": "string", "title": "Field Name"}, "value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value", "description": "Value of the drug attribute"}}, "type": "object", "required": ["field_name"], "title": "DrugValApiCreate"}, "Event": {"properties": {"created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "order_position": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Order Position", "description": "A ranked value to sort this event if its contained in list of events. If not provided, it will default to highest sort order compared to existing events in this study."}, "name": {"type": "string", "maxLength": 64, "pattern": "^[a-zA-Z0-9- ]+$", "title": "Name", "description": "A (study wide) unique name for the Event.", "examples": ["visit01", "TI12"]}, "study_id": {"type": "string", "format": "uuid", "title": "Study Id"}, "id": {"type": "string", "format": "uuid", "title": "Id"}}, "type": "object", "required": ["study_id"], "title": "Event"}, "EventCreateAPI": {"properties": {"order_position": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Order Position", "description": "A ranked value to sort this event if its contained in list of events. If not provided, it will default to highest sort order compared to existing events in this study."}, "name": {"type": "string", "maxLength": 64, "pattern": "^[a-zA-Z0-9- ]+$", "title": "Name", "description": "A (study wide) unique name for the Event.", "examples": ["visit01", "TI12"]}}, "type": "object", "title": "EventCreateAPI"}, "EventRead": {"properties": {"created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "order_position": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Order Position", "description": "A ranked value to sort this event if its contained in list of events. If not provided, it will default to highest sort order compared to existing events in this study."}, "name": {"type": "string", "maxLength": 64, "pattern": "^[a-zA-Z0-9- ]+$", "title": "Name", "description": "A (study wide) unique name for the Event.", "examples": ["visit01", "TI12"]}, "study_id": {"type": "string", "format": "uuid", "title": "Study Id"}, "id": {"type": "string", "format": "uuid", "title": "Id"}}, "type": "object", "required": ["study_id", "id"], "title": "EventRead"}, "EventReadPerProband": {"properties": {"created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "order_position": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Order Position", "description": "A ranked value to sort this event if its contained in list of events. If not provided, it will default to highest sort order compared to existing events in this study."}, "name": {"type": "string", "maxLength": 64, "pattern": "^[a-zA-Z0-9- ]+$", "title": "Name", "description": "A (study wide) unique name for the Event.", "examples": ["visit01", "TI12"]}, "study_id": {"type": "string", "format": "uuid", "title": "Study Id"}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "proband_id": {"type": "string", "title": "Proband Id", "description": "the ID of the proband."}, "proband_interview_count": {"type": "integer", "title": "Proband Interview Count", "description": "How many interviews has the proband in this event."}}, "type": "object", "required": ["study_id", "id", "proband_id", "proband_interview_count"], "title": "EventReadPerProband"}, "EventUpdate": {"properties": {"order_position": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Order Position", "description": "A ranked value to sort this event if its contained in list of events. If not provided, it will default to highest sort order compared to existing events in this study."}, "name": {"anyOf": [{"type": "string", "maxLength": 64, "pattern": "^[a-zA-Z0-9- ]+$"}, {"type": "null"}], "title": "Name", "description": "A (study wide) unique name for the Event.", "examples": ["visit01", "TI12"]}}, "type": "object", "title": "EventUpdate"}, "ExportJob": {"properties": {"export_id": {"type": "string", "format": "uuid", "title": "Export Id"}, "state": {"$ref": "#/components/schemas/WorkerJobState"}, "download_file_path": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Download File Path"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "error": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Error"}, "export_format": {"type": "string", "enum": ["csv", "json"], "title": "Export Format"}}, "type": "object", "required": ["export_id", "state", "created_at"], "title": "ExportJob"}, "HTTPErrorResponeRepresentation": {"properties": {"detail": {"type": "string", "title": "Detail"}}, "type": "object", "required": ["detail"], "title": "HTTPErrorResponeRepresentation", "example": {"detail": "HTTPException raised."}}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "HealthCheck": {"properties": {"healthy": {"type": "boolean", "title": "Healthy"}}, "type": "object", "required": ["healthy"], "title": "HealthCheck"}, "HealthCheckReport": {"properties": {"name": {"type": "string", "title": "Name"}, "version": {"type": "string", "title": "Version"}, "db_working": {"type": "boolean", "title": "Db Working"}, "drugs_imported": {"type": "boolean", "title": "Drugs Imported"}, "last_worker_run_succesfull": {"type": "boolean", "title": "Last Worker Run Succesfull"}, "drug_search_index_working": {"type": "boolean", "title": "Drug Search Index Working"}}, "type": "object", "required": ["name", "version", "db_working", "drugs_imported", "last_worker_run_succesfull", "drug_search_index_working"], "title": "HealthCheckReport"}, "Intake": {"properties": {"created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "source_of_drug_information": {"anyOf": [{"$ref": "#/components/schemas/SourceOfDrugInformationAnwers"}, {"type": "null"}], "description": "How was the drug/medication identified."}, "intake_start_time_utc": {"type": "string", "format": "date", "title": "Intake Start Time Utc"}, "intake_end_time_utc": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Intake End Time Utc"}, "administered_by_doctor": {"anyOf": [{"$ref": "#/components/schemas/AdministeredByDoctorAnswers"}, {"type": "null"}]}, "intake_regular_or_as_needed": {"anyOf": [{"$ref": "#/components/schemas/IntakeRegularOrAsNeededAnswers"}, {"type": "null"}], "description": "If a med is taken regualr or as needed. When choosen regular the field `regular_intervall_of_daily_dose` is mandatory and `as_needed_dose_unit` must be `None`/`null`. When the choosen `as needed` the oposite is true. This is the old IDOM behaviour, its ugly, i hate it and it will change in a futue version"}, "dose_per_day": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Dose Per Day"}, "regular_intervall_of_daily_dose": {"anyOf": [{"$ref": "#/components/schemas/IntervalOfDailyDoseAnswers"}, {"type": "null"}]}, "as_needed_dose_unit": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "As Needed Dose Unit"}, "consumed_meds_today": {"$ref": "#/components/schemas/ConsumedMedsTodayAnswers"}, "drug_id": {"type": "string", "format": "uuid", "title": "Drug Id", "description": "ID of the drug as returned from the drug search."}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "interview_id": {"type": "string", "format": "uuid", "title": "Interview Id"}}, "type": "object", "required": ["intake_start_time_utc", "as_needed_dose_unit", "consumed_meds_today", "interview_id"], "title": "Intake"}, "IntakeCreateAPI": {"properties": {"source_of_drug_information": {"anyOf": [{"$ref": "#/components/schemas/SourceOfDrugInformationAnwers"}, {"type": "null"}], "description": "How was the drug/medication identified."}, "intake_start_time_utc": {"type": "string", "format": "date", "title": "Intake Start Time Utc"}, "intake_end_time_utc": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Intake End Time Utc"}, "administered_by_doctor": {"anyOf": [{"$ref": "#/components/schemas/AdministeredByDoctorAnswers"}, {"type": "null"}]}, "intake_regular_or_as_needed": {"anyOf": [{"$ref": "#/components/schemas/IntakeRegularOrAsNeededAnswers"}, {"type": "null"}], "description": "If a med is taken regualr or as needed. When choosen regular the field `regular_intervall_of_daily_dose` is mandatory and `as_needed_dose_unit` must be `None`/`null`. When the choosen `as needed` the oposite is true. This is the old IDOM behaviour, its ugly, i hate it and it will change in a futue version"}, "dose_per_day": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Dose Per Day"}, "regular_intervall_of_daily_dose": {"anyOf": [{"$ref": "#/components/schemas/IntervalOfDailyDoseAnswers"}, {"type": "null"}]}, "as_needed_dose_unit": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "As Needed Dose Unit"}, "consumed_meds_today": {"$ref": "#/components/schemas/ConsumedMedsTodayAnswers"}, "drug_id": {"type": "string", "format": "uuid", "title": "Drug Id", "description": "ID of the drug as returned from the drug search."}}, "type": "object", "required": ["intake_start_time_utc", "as_needed_dose_unit", "consumed_meds_today"], "title": "IntakeCreateAPI", "description": "This class/table also saves some extra question for every interview. This is 1-to-1 what the old IDOM software did. and its a mess.\ni fucking hate it. its unflexible, complex and ugly!\nfor a future version we need an extra class/table to store extra question on a per study base.\nfields (with meatdata like options) could be defined in json schema. so clients can generate dynamic forms relatively easy."}, "IntakeDetailListItem": {"properties": {"source_of_drug_information": {"anyOf": [{"$ref": "#/components/schemas/SourceOfDrugInformationAnwers"}, {"type": "null"}], "description": "How was the drug/medication identified."}, "intake_start_time_utc": {"type": "string", "format": "date", "title": "Intake Start Time Utc"}, "intake_end_time_utc": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Intake End Time Utc"}, "administered_by_doctor": {"anyOf": [{"$ref": "#/components/schemas/AdministeredByDoctorAnswers"}, {"type": "null"}]}, "intake_regular_or_as_needed": {"anyOf": [{"$ref": "#/components/schemas/IntakeRegularOrAsNeededAnswers"}, {"type": "null"}], "description": "If a med is taken regualr or as needed. When choosen regular the field `regular_intervall_of_daily_dose` is mandatory and `as_needed_dose_unit` must be `None`/`null`. When the choosen `as needed` the oposite is true. This is the old IDOM behaviour, its ugly, i hate it and it will change in a futue version"}, "dose_per_day": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Dose Per Day"}, "regular_intervall_of_daily_dose": {"anyOf": [{"$ref": "#/components/schemas/IntervalOfDailyDoseAnswers"}, {"type": "null"}]}, "as_needed_dose_unit": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "As Needed Dose Unit"}, "consumed_meds_today": {"$ref": "#/components/schemas/ConsumedMedsTodayAnswers"}, "drug_id": {"type": "string", "format": "uuid", "title": "Drug Id", "description": "ID of the drug as returned from the drug search."}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "interview_id": {"type": "string", "format": "uuid", "title": "Interview Id"}, "interview": {"$ref": "#/components/schemas/Interview"}, "event": {"$ref": "#/components/schemas/Event"}, "drug": {"anyOf": [{"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Drug__1"}, {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Drug__2"}], "title": "Drug"}}, "type": "object", "required": ["intake_start_time_utc", "as_needed_dose_unit", "consumed_meds_today", "interview_id", "interview", "event", "drug"], "title": "IntakeDetailListItem"}, "IntakeRegularOrAsNeededAnswers": {"type": "string", "enum": ["regular", "as needed"], "title": "IntakeRegularOrAsNeededAnswers"}, "IntakeUpdate": {"properties": {"source_of_drug_information": {"anyOf": [{"$ref": "#/components/schemas/SourceOfDrugInformationAnwers"}, {"type": "null"}], "description": "How was the drug/medication identified."}, "intake_start_time_utc": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Intake Start Time Utc"}, "intake_end_time_utc": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Intake End Time Utc"}, "administered_by_doctor": {"anyOf": [{"$ref": "#/components/schemas/AdministeredByDoctorAnswers"}, {"type": "null"}]}, "intake_regular_or_as_needed": {"anyOf": [{"$ref": "#/components/schemas/IntakeRegularOrAsNeededAnswers"}, {"type": "null"}], "description": "If a med is taken regualr or as needed. When choosen regular the field `regular_intervall_of_daily_dose` is mandatory and `as_needed_dose_unit` must be `None`/`null`. When the choosen `as needed` the oposite is true. This is the old IDOM behaviour, its ugly, i hate it and it will change in a futue version"}, "dose_per_day": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Dose Per Day"}, "regular_intervall_of_daily_dose": {"anyOf": [{"$ref": "#/components/schemas/IntervalOfDailyDoseAnswers"}, {"type": "null"}]}, "as_needed_dose_unit": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "As Needed Dose Unit"}, "consumed_meds_today": {"anyOf": [{"$ref": "#/components/schemas/ConsumedMedsTodayAnswers"}, {"type": "null"}]}}, "type": "object", "title": "IntakeUpdate"}, "IntervalOfDailyDoseAnswers": {"type": "string", "enum": ["Unkown", "Daily", "every 2. day", "every 3. day", "every 4. day / twice a week", "intervals of one week or more"], "title": "IntervalOfDailyDoseAnswers"}, "Interview": {"properties": {"created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "interview_start_time_utc": {"type": "string", "format": "date-time", "title": "Interview Start Time Utc", "description": "Defaults to current time."}, "interview_end_time_utc": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Interview End Time Utc"}, "proband_has_taken_meds": {"type": "boolean", "title": "Proband Has Taken Meds"}, "proband_external_id": {"type": "string", "title": "Proband External Id", "description": "A unique ID given to the proband from the studies external proband management system"}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "event_id": {"type": "string", "format": "uuid", "title": "Event Id"}, "interviewer_user_id": {"type": "string", "format": "uuid", "title": "Interviewer User Id"}}, "type": "object", "required": ["proband_has_taken_meds", "proband_external_id", "id", "event_id", "interviewer_user_id"], "title": "Interview"}, "InterviewCreateAPI": {"properties": {"interview_start_time_utc": {"type": "string", "format": "date-time", "title": "Interview Start Time Utc", "description": "Defaults to current time."}, "interview_end_time_utc": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Interview End Time Utc"}, "proband_has_taken_meds": {"type": "boolean", "title": "Proband Has Taken Meds"}, "proband_external_id": {"type": "string", "title": "Proband External Id", "description": "A unique ID given to the proband from the studies external proband management system"}}, "type": "object", "required": ["proband_has_taken_meds", "proband_external_id"], "title": "InterviewCreateAPI"}, "InterviewUpdateAPI": {"properties": {"interview_start_time_utc": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Interview Start Time Utc"}, "interview_end_time_utc": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Interview End Time Utc"}, "proband_has_taken_meds": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Proband Has Taken Meds"}}, "type": "object", "title": "InterviewUpdateAPI"}, "JWTAccessTokenResponse": {"properties": {"token_type": {"type": "string", "const": "Bearer", "title": "Token Type", "default": "Bearer"}, "expires_in": {"type": "integer", "title": "Expires In", "description": "The number of seconds until the token expires", "examples": [3600]}, "expires_at": {"type": "integer", "title": "Expires At", "description": "The time as POSIX timestamp in UTC when the token expires", "examples": [1751896642]}, "access_token": {"type": "string", "title": "Access Token", "description": "Token to be used to authenticate against the API", "examples": ["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"]}}, "type": "object", "required": ["expires_in", "expires_at", "access_token"], "title": "JWTAccessTokenResponse"}, "JWTBundleTokenResponse": {"properties": {"token_type": {"type": "string", "const": "Bearer", "title": "Token Type", "default": "Bearer"}, "expires_in": {"type": "integer", "title": "Expires In", "description": "The number of seconds until the token expires", "examples": [3600]}, "expires_at": {"type": "integer", "title": "Expires At", "description": "The time as POSIX timestamp in UTC when the token expires", "examples": [1751896642]}, "refresh_token": {"type": "string", "title": "Refresh Token", "description": "Refresh token to be used to get new access tokens", "examples": ["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"]}, "access_token": {"type": "string", "title": "Access Token", "description": "Token to be used to authenticate against the API", "examples": ["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"]}, "refresh_token_expires_in": {"type": "integer", "title": "Refresh Token Expires In", "description": "The number of seconds until the token expires", "examples": [3600]}, "refresh_token_expires_at": {"type": "integer", "title": "Refresh Token Expires At"}}, "type": "object", "required": ["expires_in", "expires_at", "refresh_token", "access_token", "refresh_token_expires_in", "refresh_token_expires_at"], "title": "JWTBundleTokenResponse"}, "MedLogSearchEngineResult": {"properties": {"drug_id": {"type": "string", "format": "uuid", "title": "Drug Id", "examples": ["ff16fc08-6484-4097-bd51-f8c17c640a06"]}, "relevance_score": {"type": "number", "title": "Relevance Score", "examples": ["1.4"]}, "drug": {"anyOf": [{"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Drug__1"}, {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Drug__2"}], "title": "Drug"}}, "type": "object", "required": ["drug_id", "relevance_score", "drug"], "title": "MedLogSearchEngineResult"}, "MultiAttrRefValApplikationsart": {"properties": {"value": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/applikationsart/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/applikationsart/refs"}}, "type": "object", "title": "MultiAttrRefValApplikationsart"}, "MultiAttrRefValIcd10": {"properties": {"value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/icd10/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/icd10/refs"}}, "type": "object", "title": "MultiAttrRefValIcd10"}, "MultiAttrRefValKeywords": {"properties": {"value": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/keywords/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/keywords/refs"}}, "type": "object", "title": "MultiAttrRefValKeywords"}, "MultiAttrRefs": {"properties": {"applikationsart": {"anyOf": [{"items": {"$ref": "#/components/schemas/MultiAttrRefValApplikationsart"}, "type": "array"}, {"type": "null"}], "title": "Applikationsart", "description": "Art und Weise wie ein Arzneimittel verabreicht wird", "default": []}, "keywords": {"anyOf": [{"items": {"$ref": "#/components/schemas/MultiAttrRefValKeywords"}, "type": "array"}, {"type": "null"}], "title": "Keywords", "description": "Stichw\u00f6rter", "default": []}, "icd10": {"anyOf": [{"items": {"$ref": "#/components/schemas/MultiAttrRefValIcd10"}, "type": "array"}, {"type": "null"}], "title": "Icd10", "description": "Einordnung der Pr\u00e4parate nach ICD-10-Schl\u00fcssel", "default": []}}, "type": "object", "title": "MultiAttrRefs"}, "PaginatedResponse_DrugAttrFieldLovItemAPIRead_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/DrugAttrFieldLovItemAPIRead"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[DrugAttrFieldLovItemAPIRead]"}, "PaginatedResponse_EventReadPerProband_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/EventReadPerProband"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[EventReadPerProband]"}, "PaginatedResponse_Event_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/Event"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[Event]"}, "PaginatedResponse_ExportJob_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/ExportJob"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[ExportJob]"}, "PaginatedResponse_IntakeDetailListItem_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/IntakeDetailListItem"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[IntakeDetailListItem]"}, "PaginatedResponse_Intake_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/Intake"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[Intake]"}, "PaginatedResponse_MedLogSearchEngineResult_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/MedLogSearchEngineResult"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[MedLogSearchEngineResult]"}, "PaginatedResponse_StudyPermissionRead_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/StudyPermissionRead"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[StudyPermissionRead]"}, "PaginatedResponse_Study_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/Study"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[Study]"}, "PaginatedResponse_User_": {"properties": {"total_count": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Total Count", "description": "Total number of items in the database.", "examples": [300]}, "offset": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Offset", "description": "Starting position index of the returned items in the dataset.", "default": 0, "examples": [299]}, "count": {"type": "integer", "title": "Count", "description": "Number of items returned in the response", "examples": [1]}, "items": {"items": {"$ref": "#/components/schemas/User"}, "type": "array", "title": "Items", "description": "List of items returned in the response following given criteria"}}, "type": "object", "required": ["count", "items"], "title": "PaginatedResponse[User]"}, "SourceOfDrugInformationAnwers": {"type": "string", "enum": ["Medication package: Scanned PZN", "Medication package: Typed in PZN", "Medication package: Drug name", "Medication leaflet", "Study participant: medication plan", "Study participant: Medication prescription", "Study participant: verbal specification", "Follow up via phone/message: Typed in PZN", "Follow up via phone/message: Medication name"], "title": "SourceOfDrugInformationAnwers"}, "Study": {"properties": {"created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "display_name": {"anyOf": [{"type": "string", "maxLength": 128}, {"type": "null"}], "title": "Display Name", "examples": ["Pr\u00e4diabetes-Lebensstil-Interventions-Studie (PLIS)", "BARIA-DDZ-Studie"]}, "no_permissions": {"type": "boolean", "title": "No Permissions", "description": "If this is set to True all user have access as interviewers to the study. This can be utile when this MedLog instance only host one study. Admin access still need to be allocated explicit.", "default": false}, "deactivated": {"type": "boolean", "title": "Deactivated", "default": false}, "id": {"type": "string", "format": "uuid", "title": "Id"}}, "type": "object", "title": "Study"}, "StudyCreateAPI": {"properties": {"display_name": {"anyOf": [{"type": "string", "maxLength": 128}, {"type": "null"}], "title": "Display Name", "examples": ["Pr\u00e4diabetes-Lebensstil-Interventions-Studie (PLIS)", "BARIA-DDZ-Studie"]}, "no_permissions": {"type": "boolean", "title": "No Permissions", "description": "If this is set to True all user have access as interviewers to the study. This can be utile when this MedLog instance only host one study. Admin access still need to be allocated explicit.", "default": false}}, "type": "object", "title": "StudyCreateAPI"}, "StudyPermissionRead": {"properties": {"is_study_viewer": {"type": "boolean", "title": "Is Study Viewer", "description": "This is the minimal access to a study. The user can see all data but can not alter anything", "default": true}, "is_study_interviewer": {"type": "boolean", "title": "Is Study Interviewer", "description": "Study interviewers can create new interview entries for this study.", "default": false}, "is_study_admin": {"type": "boolean", "title": "Is Study Admin", "description": "Study admins can give access to the study to new users.", "default": false}, "study_id": {"type": "string", "format": "uuid", "title": "Study Id"}, "user_id": {"type": "string", "format": "uuid", "title": "User Id"}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "user_ref": {"$ref": "#/components/schemas/User"}, "study_ref": {"$ref": "#/components/schemas/Study"}}, "type": "object", "required": ["study_id", "user_id", "id", "user_ref", "study_ref"], "title": "StudyPermissionRead"}, "StudyPermisson": {"properties": {"is_study_viewer": {"type": "boolean", "title": "Is Study Viewer", "description": "This is the minimal access to a study. The user can see all data but can not alter anything", "default": true}, "is_study_interviewer": {"type": "boolean", "title": "Is Study Interviewer", "description": "Study interviewers can create new interview entries for this study.", "default": false}, "is_study_admin": {"type": "boolean", "title": "Is Study Admin", "description": "Study admins can give access to the study to new users.", "default": false}, "study_id": {"type": "string", "format": "uuid", "title": "Study Id"}, "user_id": {"type": "string", "format": "uuid", "title": "User Id"}, "id": {"type": "string", "format": "uuid", "title": "Id"}}, "type": "object", "required": ["study_id", "user_id"], "title": "StudyPermisson"}, "StudyPermissonUpdate": {"properties": {"is_study_viewer": {"type": "boolean", "title": "Is Study Viewer", "description": "This is the minimal access to a study. The user can see all data but can not alter anything", "default": true}, "is_study_interviewer": {"type": "boolean", "title": "Is Study Interviewer", "description": "Study interviewers can create new interview entries for this study.", "default": false}, "is_study_admin": {"type": "boolean", "title": "Is Study Admin", "description": "Study admins can give access to the study to new users.", "default": false}}, "type": "object", "title": "StudyPermissonUpdate"}, "StudyUpdate": {"properties": {"display_name": {"anyOf": [{"type": "string", "maxLength": 128}, {"type": "null"}], "title": "Display Name", "examples": ["Pr\u00e4diabetes-Lebensstil-Interventions-Studie (PLIS)", "BARIA-DDZ-Studie"]}, "no_permissions": {"type": "boolean", "title": "No Permissions", "description": "If this is set to True all user have access as interviewers to the study. This can be utile when this MedLog instance only host one study. Admin access still need to be allocated explicit.", "default": false}, "deactivated": {"type": "boolean", "title": "Deactivated", "default": false}}, "type": "object", "title": "StudyUpdate"}, "User": {"properties": {"created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "email": {"anyOf": [{"type": "string", "maxLength": 320}, {"type": "null"}], "title": "Email", "examples": ["clara@uni.wroc.pl", "titor@time.com"]}, "display_name": {"anyOf": [{"type": "string", "maxLength": 128, "minLength": 2}, {"type": "null"}], "title": "Display Name", "examples": ["Clara Immerwahr", "John Titor"]}, "id": {"type": "string", "format": "uuid", "title": "Id"}, "roles": {"items": {"type": "string"}, "type": "array", "title": "Roles"}, "deactivated": {"type": "boolean", "title": "Deactivated", "default": false}, "is_email_verified": {"type": "boolean", "title": "Is Email Verified", "default": false}, "user_name": {"type": "string", "maxLength": 128, "minLength": 3, "pattern": "^[a-zA-Z0-9.-_@]+$", "title": "User Name", "examples": ["clara.immerwahr", "titor.extern.times"]}}, "type": "object", "required": ["user_name"], "title": "User"}, "UserCreate": {"properties": {"email": {"anyOf": [{"type": "string", "maxLength": 320}, {"type": "null"}], "title": "Email", "examples": ["clara@uni.wroc.pl", "titor@time.com"]}, "display_name": {"anyOf": [{"type": "string", "maxLength": 128, "minLength": 2}, {"type": "null"}], "title": "Display Name", "examples": ["Clara Immerwahr", "John Titor"]}, "user_name": {"type": "string", "maxLength": 128, "minLength": 3, "pattern": "^[a-zA-Z0-9.-_@]+$", "title": "User Name", "examples": ["clara.immerwahr", "titor.extern.times"]}, "id": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Id"}}, "type": "object", "required": ["user_name"], "title": "UserCreate"}, "UserRoleApiRead": {"properties": {"role_name": {"type": "string", "title": "Role Name", "description": "The name and identifier of the rule. It can be applied to user objects."}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description", "description": "Description of the role.", "default": ""}}, "type": "object", "required": ["role_name"], "title": "UserRoleApiRead"}, "UserUpdateByAdmin": {"properties": {"email": {"anyOf": [{"type": "string", "maxLength": 320}, {"type": "null"}], "title": "Email", "examples": ["clara@uni.wroc.pl", "titor@time.com"]}, "display_name": {"anyOf": [{"type": "string", "maxLength": 128, "minLength": 2}, {"type": "null"}], "title": "Display Name", "examples": ["Clara Immerwahr", "John Titor"]}, "id": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Id"}, "roles": {"items": {"type": "string"}, "type": "array", "title": "Roles"}, "deactivated": {"type": "boolean", "title": "Deactivated", "default": false}, "is_email_verified": {"type": "boolean", "title": "Is Email Verified", "default": false}}, "type": "object", "title": "UserUpdateByAdmin"}, "UserUpdateByUser": {"properties": {"email": {"anyOf": [{"type": "string", "maxLength": 320}, {"type": "null"}], "title": "Email", "examples": ["clara@uni.wroc.pl", "titor@time.com"]}, "display_name": {"anyOf": [{"type": "string", "maxLength": 128, "minLength": 2}, {"type": "null"}], "title": "Display Name", "examples": ["Clara Immerwahr", "John Titor"]}}, "type": "object", "title": "UserUpdateByUser"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "WorkerJobState": {"type": "string", "enum": ["queued", "running", "failed", "success"], "title": "WorkerJobState"}, "medlogserver__model__drug_data__api_drug_model_factory__AttrRefValHersteller__1": {"properties": {"value": {"type": "string", "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/hersteller/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/hersteller/refs"}}, "type": "object", "title": "AttrRefValHersteller"}, "medlogserver__model__drug_data__api_drug_model_factory__AttrRefValHersteller__2": {"properties": {"value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/hersteller/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/hersteller/refs"}}, "type": "object", "title": "AttrRefValHersteller"}, "medlogserver__model__drug_data__api_drug_model_factory__AttrRefValVertriebsstatus__1": {"properties": {"value": {"type": "string", "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/vertriebsstatus/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/vertriebsstatus/refs"}}, "type": "object", "title": "AttrRefValVertriebsstatus"}, "medlogserver__model__drug_data__api_drug_model_factory__AttrRefValVertriebsstatus__2": {"properties": {"value": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Value"}, "display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Display"}, "ref_list": {"type": "string", "const": "/api/drug/field_def/vertriebsstatus/refs", "title": "Ref List", "description": "The API path to the list this value references", "default": "/api/drug/field_def/vertriebsstatus/refs"}}, "type": "object", "title": "AttrRefValVertriebsstatus"}, "medlogserver__model__drug_data__api_drug_model_factory__AttrRefs__1": {"properties": {"darreichungsform": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValDarreichungsform"}, {"type": "null"}], "description": "Darreichungsform IFA"}, "vertriebsstatus": {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__AttrRefValVertriebsstatus__1", "description": "Wird das Produkt momentan vertrieben"}, "normgroesse": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValNormgroesse"}, {"type": "null"}], "description": "Packungsgr\u00f6\u00dfenkennzeichnung f\u00fcr Medikamente ist eine in Deutschland bestehende Normierung der in der Apotheke abzugebenden Menge"}, "abgabestatus": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValAbgabestatus"}, {"type": "null"}], "description": "Ob und wie das Produkt an den Patienten abgegeben werden darf"}, "lebensmittel": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValLebensmittel"}, {"type": "null"}], "description": "Lebensmittelstatus des Produkt"}, "diaetetikum": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValDiaetetikum"}, {"type": "null"}], "description": "Diaetetikumstatus des Produkt"}, "hersteller": {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__AttrRefValHersteller__1", "description": "Hersteller des Produkt"}}, "type": "object", "required": ["vertriebsstatus", "hersteller"], "title": "AttrRefs"}, "medlogserver__model__drug_data__api_drug_model_factory__AttrRefs__2": {"properties": {"darreichungsform": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValDarreichungsform"}, {"type": "null"}], "description": "Darreichungsform IFA", "default": []}, "vertriebsstatus": {"anyOf": [{"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__AttrRefValVertriebsstatus__2"}, {"type": "null"}], "description": "Wird das Produkt momentan vertrieben", "default": []}, "normgroesse": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValNormgroesse"}, {"type": "null"}], "description": "Packungsgr\u00f6\u00dfenkennzeichnung f\u00fcr Medikamente ist eine in Deutschland bestehende Normierung der in der Apotheke abzugebenden Menge", "default": []}, "abgabestatus": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValAbgabestatus"}, {"type": "null"}], "description": "Ob und wie das Produkt an den Patienten abgegeben werden darf", "default": []}, "lebensmittel": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValLebensmittel"}, {"type": "null"}], "description": "Lebensmittelstatus des Produkt", "default": []}, "diaetetikum": {"anyOf": [{"$ref": "#/components/schemas/AttrRefValDiaetetikum"}, {"type": "null"}], "description": "Diaetetikumstatus des Produkt", "default": []}, "hersteller": {"anyOf": [{"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__AttrRefValHersteller__2"}, {"type": "null"}], "description": "Hersteller des Produkt", "default": []}}, "type": "object", "title": "AttrRefs"}, "medlogserver__model__drug_data__api_drug_model_factory__Codes__1": {"properties": {"PZN": {"type": "string", "title": "Pzn"}, "MMIP": {"type": "string", "title": "Mmip", "description": "Interne 'PRODUCTID' des Vidal MMI Pharmindex"}}, "type": "object", "required": ["PZN", "MMIP"], "title": "Codes"}, "medlogserver__model__drug_data__api_drug_model_factory__Codes__2": {"properties": {"PZN": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Pzn"}, "MMIP": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Mmip", "description": "Interne 'PRODUCTID' des Vidal MMI Pharmindex"}}, "type": "object", "title": "Codes"}, "medlogserver__model__drug_data__api_drug_model_factory__Drug__1": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "trade_name": {"type": "string", "title": "Trade Name"}, "market_access_date": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Market Access Date"}, "market_exit_date": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Market Exit Date"}, "is_custom_drug": {"type": "boolean", "title": "Is Custom Drug", "description": "User can create placeholder drugs, if the drug they try to document is not listed yet.", "default": false}, "custom_drug_notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Custom Drug Notes", "description": "If custom drug is defined the user can enter some notes here."}, "custom_created_by": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Custom Created By", "description": "If Drug is created by user as a custom drug the user id will be saved here."}, "codes": {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Codes__1"}, "attrs": {"$ref": "#/components/schemas/Attrs", "description": "Scalar Drug attributes. One value only per drug attribute."}, "attrs_multi": {"$ref": "#/components/schemas/AttrsMulti", "description": "All Drug attributes that can have multiple values. e.g. something like 'Keywords'. Will always be a list."}, "attrs_ref": {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__AttrRefs__1", "description": "All Drug attributes reference an existing list (value + display Value. Aka SelectList)."}, "attrs_multi_ref": {"$ref": "#/components/schemas/MultiAttrRefs", "description": "All Drug attributes that can have a list of values. These values must reference an existing list."}}, "type": "object", "required": ["trade_name", "custom_drug_notes"], "title": "Drug"}, "medlogserver__model__drug_data__api_drug_model_factory__Drug__2": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "trade_name": {"type": "string", "title": "Trade Name"}, "market_access_date": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Market Access Date"}, "market_exit_date": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Market Exit Date"}, "is_custom_drug": {"type": "boolean", "title": "Is Custom Drug", "description": "User can create placeholder drugs, if the drug they try to document is not listed yet.", "default": false}, "custom_drug_notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Custom Drug Notes", "description": "If custom drug is defined the user can enter some notes here."}, "custom_created_by": {"anyOf": [{"type": "string", "format": "uuid"}, {"type": "null"}], "title": "Custom Created By", "description": "If Drug is created by user as a custom drug the user id will be saved here."}, "codes": {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__Codes__2"}, "attrs": {"$ref": "#/components/schemas/Attrs", "description": "Scalar Drug attributes. One value only per drug attribute."}, "attrs_multi": {"$ref": "#/components/schemas/AttrsMulti", "description": "All Drug attributes that can have multiple values. e.g. something like 'Keywords'. Will always be a list."}, "attrs_ref": {"$ref": "#/components/schemas/medlogserver__model__drug_data__api_drug_model_factory__AttrRefs__2", "description": "All Drug attributes reference an existing list (value + display Value. Aka SelectList)."}, "attrs_multi_ref": {"$ref": "#/components/schemas/MultiAttrRefs", "description": "All Drug attributes that can have a list of values. These values must reference an existing list."}}, "type": "object", "required": ["trade_name", "custom_drug_notes"], "title": "Drug"}, "medlogserver__utils__Error__1": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Export job does not exist."}}, "type": "object", "title": "Error"}, "medlogserver__utils__Error__2": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Export job is not finished yet. Try again later."}}, "type": "object", "title": "Error"}, "medlogserver__utils__Error__3": {"properties": {"detail": {"additionalProperties": {"type": "string"}, "type": "object", "title": "Detail", "default": "Export job does not exist."}}, "type": "object", "title": "Error"}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "/api/auth/token"}}}}}}